{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md Asif\\\\Desktop\\\\CALENDAR FRONTEND\\\\src\\\\Components\\\\UserModule\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import config from \"../../Common/Configurations/APIConfig\";\n// import { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\n\n// const initialFieldValues = {\n//   companyId: \"00000000-0000-0000-0000-000000000000\",\n//   companyName: \"\",\n//   location: \"\",\n//   linkedInProfile: \"\",\n//   emails: \"\",\n//   phoneNumbers: \"\",\n//   comments: \"\",\n//   communicationPeriodicity: \"\",\n// };\n\n// export default function Dashboard() {\n//   const [lists, setLists] = useState([]);\n//   const [values, setValues] = useState(initialFieldValues);\n//   const [recordForEdit, setRecordForEdit] = useState(null);\n//   const [errors, setErrors] = useState({});\n//   const [btnSubmit, setBtnSubmit] = useState(true);\n//   const [totalPages, setTotalPages] = useState(0);\n//   const [pageSize, setPageSize] = useState(20);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [data, setData] = useState([]);\n//   const [totalRecords, setTotalRecords] = useState(0);\n\n//   const headerConfig = {\n//     headers: {\n//       Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\n//       \"Content-Type\": \"application/json\",\n//     },\n//   };\n\n//   useEffect(() => {\n//     if (recordForEdit !== null) {\n//       setValues(recordForEdit);\n//     }\n//   }, [recordForEdit]);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setValues({\n//       ...values,\n//       [name]: value,\n//     });\n//   };\n\n//   const validate = () => {\n//     let temp = {};\n//     temp.companyName = values.companyName !== \"\";\n//     temp.location = values.location !== \"\";\n//     temp.linkedInProfile = values.linkedInProfile !== \"\";\n//     temp.emails = values.emails !== \"\";\n//     temp.phoneNumbers = values.phoneNumbers !== \"\";\n//     temp.comments = values.comments !== \"\";\n//     temp.communicationPeriodicity = values.communicationPeriodicity !== \"\";\n//     setErrors(temp);\n//     return Object.values(temp).every((x) => x === true);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (validate()) {\n//       setBtnSubmit(false);\n//       const payload = { ...values };\n//       addOrEdit(payload);\n//     }\n//   };\n//   const handleCommunicationPerformed = () => {\n//     // Logic for marking a communication as performed or any desired action\n//     console.log(\"Communication Performed Button Clicked\");\n//   };\n\n//   const applicationAPI = () => {\n//     return {\n//       create: (newRecord) =>\n//         axios.post(\n//           `${config.APIACTIVATEURL}${config.CREATECOMPANYMANAGEMENT}`,\n//           newRecord,\n//           headerConfig\n//         ),\n//       update: (updateRecord) =>\n//         axios.put(\n//           `${config.APIACTIVATEURL}${config.UPDATECOMPANYMANAGEMENT}`,\n//           updateRecord,\n//           headerConfig\n//         ),\n//     };\n//   };\n\n//   const addOrEdit = (payload) => {\n//     if (payload.companyId === initialFieldValues.companyId) {\n//       applicationAPI()\n//         .create(payload)\n//         .then((res) => {\n//           if (res.data.statusCode === 200) {\n//             handleSuccess(\"Record Created\");\n//             resetForm();\n//             getData(pageNumber);\n//           } else {\n//             handleError(res.data.message);\n//           }\n//         })\n//         .catch(() => {\n//           handleError(\"Error in saving data\");\n//         })\n//         .finally(() => setBtnSubmit(true));\n//     } else {\n//       applicationAPI()\n//         .update(payload)\n//         .then((res) => {\n//           if (res.data.statusCode === 200) {\n//             handleSuccess(\"Record Updated\");\n//             resetForm();\n//             getData(pageNumber);\n//           } else {\n//             handleError(res.data.message);\n//           }\n//         })\n//         .catch(() => {\n//           handleError(\"Error in updating data\");\n//         })\n//         .finally(() => setBtnSubmit(true));\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setValues(initialFieldValues);\n//     setErrors({});\n//   };\n\n//   const showEditDetails = (data) => {\n//     setRecordForEdit(data);\n//   };\n\n//   const getData = (number) => {\n//     axios\n//       .get(\n//         `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\n//         headerConfig\n//       )\n//       .then((response) => {\n//         setLists(response.data.data);\n//         setPageNumber(response.data.data.pageNumber);\n//         setPageSize(response.data.data.pageSize);\n//         setTotalPages(response.data.data.totalPages);\n//         setData(response.data.data);\n//         setTotalRecords(response.data.data.totalRecords);\n//       });\n//   };\n\n//   useEffect(() => {\n//     getData(pageNumber);\n//   }, []);\n\n//   const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\n//     const page = index + 1;\n//     return (\n//       <li\n//         className=\"page-item\"\n//         key={page}\n//         onClick={() => getData(page)}\n//       >\n//         <Link className=\"page-link\">{page}</Link>\n//       </li>\n//     );\n//   });\n\n// return (\n//     <div className=\"row\">\n//   <div className=\"col-xl-12\">\n//     <div className=\"card card-height-100\">\n//       <div className=\"card-header align-items-center d-flex\">\n//         <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\n//         {/* Add the button */}\n//         <button \n//           className=\"btn btn-primary ms-auto\" \n//           onClick={() => handleCommunicationPerformed()}\n//         >\n//           Communication Performed\n//         </button>\n//       </div>\n//       <div className=\"card-body\">\n//         <div className=\"table-responsive table-card\">\n//           <table className=\"table align-middle\">\n//             <thead className=\"table-light\">\n//               <tr>\n//                 <th>S.No</th>\n//                 <th>Select</th>\n//                 <th>Company Name</th>\n//                 <th>Last Communication</th>\n//                 <th>Next Communication</th>\n//                 <th>Highlight</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {lists.length > 0 ? (\n//                 lists.map((company, index) => {\n//                   // Extract communications for the company\n//                   const lastCommunications = company.communications.filter(\n//                     (c) => c.status === true\n//                   );\n//                   const nextCommunications = company.communications.find(\n//                     (c) => c.status === false\n//                   );\n\n//                   return (\n//                     <tr key={company.companyId}>\n//                       <td>{index + 1}</td>\n//                       <td>\n//                         <input type=\"checkbox\" />\n//                       </td>\n//                       <td>{company.companyName}</td>\n//                       <td>\n//                         {lastCommunications.length > 0 ? (\n//                           <>\n//                             {lastCommunications.map((communication, idx) => (\n//                               <div key={idx}>\n//                                 {communication.communicationName} -{\" \"}\n//                                 {new Date(\n//                                   communication.scheduledDate\n//                                 ).toLocaleDateString()}\n//                               </div>\n//                             ))}\n//                           </>\n//                         ) : (\n//                           \"No Completed Communications\"\n//                         )}\n//                       </td>\n//                       <td>\n//                         {nextCommunications ? (\n//                           <>\n//                             {nextCommunications.communicationName} -{\" \"}\n//                             {new Date(\n//                               nextCommunications.scheduledDate\n//                             ).toLocaleDateString()}\n//                           </>\n//                         ) : (\n//                           \"No Upcoming Communication\"\n//                         )}\n//                       </td>\n//                       <td>\n//                         <button className=\"btn btn-link text-danger\">\n//                           Disable Highlight\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"6\" className=\"text-center\">\n//                     No data available\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n\n//               </table>\n//             </div>\n//                    <div className=\"align-items-center mt-4 pt-2 justify-content-between d-flex\">\n//                      <div className=\"flex-shrink-0\">\n//                        <div className=\"text-muted\">\n//                          Showing{\" \"}\n//                          <span className=\"fw-semibold\">{lists.length}</span> of{\" \"}\n//                          <span className=\"fw-semibold\">{totalRecords}</span>{\" \"}\n//                          Results\n//                        </div>\n//                      </div>\n//                      {/* <ul className=\"pagination pagination-separated pagination-sm mb-0\">\n//                        <li\n//                          className={\n//                            \"page-item\" + data.previousPage === null\n//                              ? \"disabled\"\n//                              : \"\"\n//                          }\n//                          onClick={() => GetFirstPageData()}\n//                        >\n//                          <Link className=\"page-link\">Previous</Link>\n//                        </li>\n//                        {renderPageNumbers}\n//                        <li\n//                          className={\n//                            \"page-item\" + data.nextPage === null\n//                              ? \"disabled\"\n//                              : \"\"\n//                          }\n//                          onClick={() => GetLastPageData()}\n//                        >\n//                          <Link className=\"page-link\">Next</Link>\n//                        </li>\n//                      </ul> */}\n//                    </div>\n//                  </div>\n//                </div>\n//              </div>\n//            </div>\n\n//  );\n// }\n\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport config from \"../../Common/Configurations/APIConfig\";\nimport { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\nimport Flatpickr from \"react-flatpickr\"; // Import Flatpickr\nimport \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialFieldValues = {\n  companyId: \"00000000-0000-0000-0000-000000000000\",\n  companyName: \"\",\n  location: \"\",\n  linkedInProfile: \"\",\n  emails: \"\",\n  phoneNumbers: \"\",\n  comments: \"\",\n  communicationPeriodicity: \"\"\n};\nexport default function Dashboard() {\n  _s();\n  const [lists, setLists] = useState([]);\n  const [values, setValues] = useState(initialFieldValues);\n  const [recordForEdit, setRecordForEdit] = useState(null);\n  const [errors, setErrors] = useState({});\n  const [btnSubmit, setBtnSubmit] = useState(true);\n  const [totalPages, setTotalPages] = useState(0);\n  const [pageSize, setPageSize] = useState(20);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [data, setData] = useState([]);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedCommunication, setSelectedCommunication] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [notes, setNotes] = useState(\"\");\n  const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\n  const [selectedCompanies, setSelectedCompanies] = useState([]);\n  const [communications, setCommunications] = useState([]);\n  const headerConfig = {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  useEffect(() => {\n    if (recordForEdit !== null) {\n      setValues(recordForEdit);\n    }\n  }, [recordForEdit]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n  const validate = () => {\n    let temp = {};\n    temp.companyName = values.companyName !== \"\";\n    temp.location = values.location !== \"\";\n    temp.linkedInProfile = values.linkedInProfile !== \"\";\n    temp.emails = values.emails !== \"\";\n    temp.phoneNumbers = values.phoneNumbers !== \"\";\n    temp.comments = values.comments !== \"\";\n    temp.communicationPeriodicity = values.communicationPeriodicity !== \"\";\n    setErrors(temp);\n    return Object.values(temp).every(x => x === true);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (validate()) {\n      setBtnSubmit(false);\n      const payload = {\n        ...values\n      };\n      addOrEdit(payload);\n    }\n  };\n  const handleCommunicationPerformed = async () => {\n    if (selectedCompanies.length > 0) {\n      try {\n        // Fetch communications from the API\n        const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\n        if (response.data && response.data.statusCode === 200) {\n          // Update communications state with API data\n          setCommunications(response.data.data || []);\n          setShowModal(true); // Open the modal\n        } else {\n          handleError(response.data.message || \"Failed to fetch communications.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching communications:\", error);\n        handleError(\"An error occurred while fetching communications.\");\n      }\n    } else {\n      alert(\"Please select at least one company!\");\n    }\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedCompanies([]); // Reset selected companies when closing modal\n  };\n  const handleModalSubmit = async () => {\n    // Payload to be sent to the backend\n    const updateRecord = {\n      selectedCompanies,\n      // Assuming this is an array of company IDs\n      selectedCommunication,\n      // Communication ID\n      selectedDate,\n      // List of dates (could be an array or a single date based on your backend logic)\n      notes // The notes entered in the modal\n    };\n    try {\n      // Make the PUT request with the provided format\n      const response = await axios.put(`${config.APIACTIVATEURL}${config.UPDATECOMPANYMANAGEMENT}`,\n      // API URL\n      updateRecord,\n      // Payload with the data\n      headerConfig // Header configuration with Authorization and Content-Type\n      );\n\n      // Handle response\n      if (response.data.statusCode === 200) {\n        handleSuccess(\"Status updated successfully.\");\n        // You can add more success logic here (like closing the modal, etc.)\n      } else {\n        handleError(response.data.message || \"Failed to update status.\");\n      }\n    } catch (error) {\n      console.error(\"Error in updating status:\", error);\n      handleError(\"An error occurred while updating the status.\");\n    }\n  };\n  const handleCheckboxChange = companyId => {\n    setSelectedCompanies(prevSelectedCompanies => {\n      if (prevSelectedCompanies.includes(companyId)) {\n        // Deselect company\n        return prevSelectedCompanies.filter(id => id !== companyId);\n      } else {\n        // Select company\n        return [...prevSelectedCompanies, companyId];\n      }\n    });\n  };\n\n  // Open the modal\n  const openModal = () => {\n    setShowModal(true);\n  };\n\n  // Close the modal\n\n  const isToday = date => {\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  };\n  const isPast = date => date < new Date();\n\n  // const applicationAPI = () => {\n  //     return {\n  //         create: (newRecord) =>\n  //             axios.post(\n  //                 `${config.APIACTIVATEURL}${config.CREATECOMPANYMANAGEMENT}`,\n  //                 newRecord,\n  //                 headerConfig\n  //             ),\n  //         update: (updateRecord) =>\n  //             axios.put(\n  //                 `${config.APIACTIVATEURL}${config.UPDATECOMPANYMANAGEMENT}`,\n  //                 updateRecord,\n  //                 headerConfig\n  //             ),\n  //     };\n  // };\n\n  // const addOrEdit = (payload) => {\n  //     if (payload.companyId === initialFieldValues.companyId) {\n  //         applicationAPI()\n  //             .create(payload)\n  //             .then((res) => {\n  //                 if (res.data.statusCode === 200) {\n  //                     handleSuccess(\"Record Created\");\n  //                     resetForm();\n  //                     getData(pageNumber);\n  //                 } else {\n  //                     handleError(res.data.message);\n  //                 }\n  //             })\n  //             .catch(() => {\n  //                 handleError(\"Error in saving data\");\n  //             })\n  //             .finally(() => setBtnSubmit(true));\n  //     } else {\n  //         applicationAPI()\n  //             .update(payload)\n  //             .then((res) => {\n  //                 if (res.data.statusCode === 200) {\n  //                     handleSuccess(\"Record Updated\");\n  //                     resetForm();\n  //                     getData(pageNumber);\n  //                 } else {\n  //                     handleError(res.data.message);\n  //                 }\n  //             })\n  //             .catch(() => {\n  //                 handleError(\"Error in updating data\");\n  //             })\n  //             .finally(() => setBtnSubmit(true));\n  //     }\n  // };\n\n  const resetForm = () => {\n    setValues(initialFieldValues);\n    setErrors({});\n  };\n  const showEditDetails = data => {\n    setRecordForEdit(data);\n  };\n  const getData = number => {\n    axios.get(`${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`, headerConfig).then(response => {\n      setLists(response.data.data);\n      setPageNumber(response.data.data.pageNumber);\n      setPageSize(response.data.data.pageSize);\n      setTotalPages(response.data.data.totalPages);\n      setData(response.data.data);\n      setTotalRecords(response.data.data.totalRecords);\n    });\n  };\n  useEffect(() => {\n    getData(pageNumber);\n  }, []);\n  const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\n    const page = index + 1;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"page-item\",\n      onClick: () => getData(page),\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        className: \"page-link\",\n        children: page\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 17\n      }, this)\n    }, page, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-xl-12\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-height-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header align-items-center d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"card-title mb-0 flex-grow-1\",\n            children: \"Communications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary ms-auto\",\n            onClick: handleCommunicationPerformed,\n            disabled: selectedCompanies.length === 0 // Disable button if no company is selected\n            ,\n            children: \"Communication Performed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 21\n        }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'fixed',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            background: 'white',\n            border: '1px solid #ccc',\n            borderRadius: '8px',\n            width: '400px',\n            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n            zIndex: 1000,\n            padding: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Communication Performed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"communicationSelect\",\n                style: {\n                  fontWeight: \"bold\"\n                },\n                children: \"Communication:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"communicationSelect\",\n                style: {\n                  width: \"100%\",\n                  padding: \"8px\",\n                  marginTop: \"5px\",\n                  border: \"1px solid #ccc\",\n                  borderRadius: \"4px\"\n                },\n                value: selectedCommunication,\n                onChange: e => setSelectedCommunication(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Communication\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 625,\n                  columnNumber: 9\n                }, this), communications.map(comm => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: comm.communicationId,\n                  children: comm.communicationName\n                }, comm.communicationId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 627,\n                  columnNumber: 13\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"updatedDate\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Updated Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Flatpickr, {\n                id: \"updatedDate\",\n                value: selectedDate,\n                onChange: date => setSelectedDate(date),\n                options: {\n                  dateFormat: 'Y-m-d'\n                },\n                style: {\n                  width: '100%',\n                  padding: '8px',\n                  marginTop: '5px',\n                  border: '1px solid #ccc',\n                  borderRadius: '4px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"notes\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Add Notes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"notes\",\n                value: notes,\n                onChange: e => setNotes(e.target.value),\n                rows: \"4\",\n                style: {\n                  width: '100%',\n                  padding: '8px',\n                  marginTop: '5px',\n                  border: '1px solid #ccc',\n                  borderRadius: '4px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '8px 16px',\n                background: '#ccc',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              onClick: handleCloseModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '8px 16px',\n                background: '#007bff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              onClick: handleModalSubmit,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive table-card\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table align-middle\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"table-light\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"S.No\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 704,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Select\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 705,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Company Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 706,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Last Communication\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 707,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Next Communication\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 708,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 703,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: lists.length > 0 ? lists.map((company, index) => {\n                  // Extract communications for the company\n                  const lastCommunications = company.communications.filter(c => c.status === true);\n                  const nextCommunications = company.communications.find(c => c.status === false);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: index + 1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 724,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"checkbox\",\n                        checked: selectedCompanies.includes(company.companyId),\n                        onChange: () => handleCheckboxChange(company.companyId)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 726,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 725,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: company.companyName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 732,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: lastCommunications.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: lastCommunications.map((communication, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [communication.communicationName, \" -\", \" \", new Date(communication.scheduledDate).toLocaleDateString()]\n                        }, idx, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 737,\n                          columnNumber: 69\n                        }, this))\n                      }, void 0, false) : \"No Completed Communications\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 733,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: nextCommunications ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          style: {\n                            color: isToday(new Date(nextCommunications.scheduledDate)) ? \"yellow\" : isPast(new Date(nextCommunications.scheduledDate)) ? \"red\" : \"inherit\",\n                            fontWeight: \"bold\" // Make the text bold\n                          },\n                          children: nextCommunications.communicationName\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 752,\n                          columnNumber: 65\n                        }, this), \" \", \"-\", \" \", new Date(nextCommunications.scheduledDate).toLocaleDateString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 766,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: \"btn btn-link text-danger\",\n                          children: \"Disable Highlight\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 767,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true) : \"No Upcoming Communication\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 749,\n                      columnNumber: 53\n                    }, this)]\n                  }, company.companyId, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 723,\n                    columnNumber: 49\n                  }, this);\n                }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"6\",\n                    className: \"text-center\",\n                    children: \"No data available\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 780,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 779,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"align-items-center mt-4 pt-2 justify-content-between d-flex\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-shrink-0\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-muted\",\n                children: [\"Showing\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"fw-semibold\",\n                  children: lists.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 792,\n                  columnNumber: 37\n                }, this), \" of\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"fw-semibold\",\n                  children: totalRecords\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 793,\n                  columnNumber: 37\n                }, this), \" \", \"Results\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 572,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"melBjqDKrcDx4iQ+H7TADol9hMo=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Link","useState","useEffect","axios","config","handleSuccess","handleError","Flatpickr","jsxDEV","_jsxDEV","Fragment","_Fragment","initialFieldValues","companyId","companyName","location","linkedInProfile","emails","phoneNumbers","comments","communicationPeriodicity","Dashboard","_s","lists","setLists","values","setValues","recordForEdit","setRecordForEdit","errors","setErrors","btnSubmit","setBtnSubmit","totalPages","setTotalPages","pageSize","setPageSize","pageNumber","setPageNumber","data","setData","totalRecords","setTotalRecords","showModal","setShowModal","selectedCommunication","setSelectedCommunication","selectedDate","setSelectedDate","Date","notes","setNotes","selectedCompany","setSelectedCompany","selectedCompanies","setSelectedCompanies","communications","setCommunications","headerConfig","headers","Authorization","localStorage","getItem","handleInputChange","e","name","value","target","validate","temp","Object","every","x","handleSubmit","preventDefault","payload","addOrEdit","handleCommunicationPerformed","length","response","get","APIACTIVATEURL","GETALLCOMMUNICATIONMANAGEMENT","statusCode","message","error","console","alert","handleCloseModal","handleModalSubmit","updateRecord","put","UPDATECOMPANYMANAGEMENT","handleCheckboxChange","prevSelectedCompanies","includes","filter","id","openModal","isToday","date","today","getDate","getMonth","getFullYear","isPast","resetForm","showEditDetails","getData","number","GETCOMMUNICATION","then","renderPageNumbers","Array","map","_","index","page","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","style","position","top","left","transform","background","border","borderRadius","width","boxShadow","zIndex","padding","marginBottom","htmlFor","fontWeight","marginTop","onChange","comm","communicationId","communicationName","options","dateFormat","rows","display","justifyContent","gap","cursor","color","company","lastCommunications","c","status","nextCommunications","find","type","checked","communication","idx","scheduledDate","toLocaleDateString","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/Md Asif/Desktop/CALENDAR FRONTEND/src/Components/UserModule/Dashboard.js"],"sourcesContent":["// import { Link } from \"react-router-dom\";\r\n// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import config from \"../../Common/Configurations/APIConfig\";\r\n// import { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\r\n\r\n// const initialFieldValues = {\r\n//   companyId: \"00000000-0000-0000-0000-000000000000\",\r\n//   companyName: \"\",\r\n//   location: \"\",\r\n//   linkedInProfile: \"\",\r\n//   emails: \"\",\r\n//   phoneNumbers: \"\",\r\n//   comments: \"\",\r\n//   communicationPeriodicity: \"\",\r\n// };\r\n\r\n// export default function Dashboard() {\r\n//   const [lists, setLists] = useState([]);\r\n//   const [values, setValues] = useState(initialFieldValues);\r\n//   const [recordForEdit, setRecordForEdit] = useState(null);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [btnSubmit, setBtnSubmit] = useState(true);\r\n//   const [totalPages, setTotalPages] = useState(0);\r\n//   const [pageSize, setPageSize] = useState(20);\r\n//   const [pageNumber, setPageNumber] = useState(1);\r\n//   const [data, setData] = useState([]);\r\n//   const [totalRecords, setTotalRecords] = useState(0);\r\n\r\n//   const headerConfig = {\r\n//     headers: {\r\n//       Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\r\n//       \"Content-Type\": \"application/json\",\r\n//     },\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (recordForEdit !== null) {\r\n//       setValues(recordForEdit);\r\n//     }\r\n//   }, [recordForEdit]);\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setValues({\r\n//       ...values,\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   const validate = () => {\r\n//     let temp = {};\r\n//     temp.companyName = values.companyName !== \"\";\r\n//     temp.location = values.location !== \"\";\r\n//     temp.linkedInProfile = values.linkedInProfile !== \"\";\r\n//     temp.emails = values.emails !== \"\";\r\n//     temp.phoneNumbers = values.phoneNumbers !== \"\";\r\n//     temp.comments = values.comments !== \"\";\r\n//     temp.communicationPeriodicity = values.communicationPeriodicity !== \"\";\r\n//     setErrors(temp);\r\n//     return Object.values(temp).every((x) => x === true);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (validate()) {\r\n//       setBtnSubmit(false);\r\n//       const payload = { ...values };\r\n//       addOrEdit(payload);\r\n//     }\r\n//   };\r\n//   const handleCommunicationPerformed = () => {\r\n//     // Logic for marking a communication as performed or any desired action\r\n//     console.log(\"Communication Performed Button Clicked\");\r\n//   };\r\n\r\n//   const applicationAPI = () => {\r\n//     return {\r\n//       create: (newRecord) =>\r\n//         axios.post(\r\n//           `${config.APIACTIVATEURL}${config.CREATECOMPANYMANAGEMENT}`,\r\n//           newRecord,\r\n//           headerConfig\r\n//         ),\r\n//       update: (updateRecord) =>\r\n//         axios.put(\r\n//           `${config.APIACTIVATEURL}${config.UPDATECOMPANYMANAGEMENT}`,\r\n//           updateRecord,\r\n//           headerConfig\r\n//         ),\r\n//     };\r\n//   };\r\n\r\n//   const addOrEdit = (payload) => {\r\n//     if (payload.companyId === initialFieldValues.companyId) {\r\n//       applicationAPI()\r\n//         .create(payload)\r\n//         .then((res) => {\r\n//           if (res.data.statusCode === 200) {\r\n//             handleSuccess(\"Record Created\");\r\n//             resetForm();\r\n//             getData(pageNumber);\r\n//           } else {\r\n//             handleError(res.data.message);\r\n//           }\r\n//         })\r\n//         .catch(() => {\r\n//           handleError(\"Error in saving data\");\r\n//         })\r\n//         .finally(() => setBtnSubmit(true));\r\n//     } else {\r\n//       applicationAPI()\r\n//         .update(payload)\r\n//         .then((res) => {\r\n//           if (res.data.statusCode === 200) {\r\n//             handleSuccess(\"Record Updated\");\r\n//             resetForm();\r\n//             getData(pageNumber);\r\n//           } else {\r\n//             handleError(res.data.message);\r\n//           }\r\n//         })\r\n//         .catch(() => {\r\n//           handleError(\"Error in updating data\");\r\n//         })\r\n//         .finally(() => setBtnSubmit(true));\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setValues(initialFieldValues);\r\n//     setErrors({});\r\n//   };\r\n\r\n//   const showEditDetails = (data) => {\r\n//     setRecordForEdit(data);\r\n//   };\r\n\r\n//   const getData = (number) => {\r\n//     axios\r\n//       .get(\r\n//         `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\r\n//         headerConfig\r\n//       )\r\n//       .then((response) => {\r\n//         setLists(response.data.data);\r\n//         setPageNumber(response.data.data.pageNumber);\r\n//         setPageSize(response.data.data.pageSize);\r\n//         setTotalPages(response.data.data.totalPages);\r\n//         setData(response.data.data);\r\n//         setTotalRecords(response.data.data.totalRecords);\r\n//       });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getData(pageNumber);\r\n//   }, []);\r\n\r\n//   const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\r\n//     const page = index + 1;\r\n//     return (\r\n//       <li\r\n//         className=\"page-item\"\r\n//         key={page}\r\n//         onClick={() => getData(page)}\r\n//       >\r\n//         <Link className=\"page-link\">{page}</Link>\r\n//       </li>\r\n//     );\r\n//   });\r\n\r\n// return (\r\n//     <div className=\"row\">\r\n//   <div className=\"col-xl-12\">\r\n//     <div className=\"card card-height-100\">\r\n//       <div className=\"card-header align-items-center d-flex\">\r\n//         <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\r\n//         {/* Add the button */}\r\n//         <button \r\n//           className=\"btn btn-primary ms-auto\" \r\n//           onClick={() => handleCommunicationPerformed()}\r\n//         >\r\n//           Communication Performed\r\n//         </button>\r\n//       </div>\r\n//       <div className=\"card-body\">\r\n//         <div className=\"table-responsive table-card\">\r\n//           <table className=\"table align-middle\">\r\n//             <thead className=\"table-light\">\r\n//               <tr>\r\n//                 <th>S.No</th>\r\n//                 <th>Select</th>\r\n//                 <th>Company Name</th>\r\n//                 <th>Last Communication</th>\r\n//                 <th>Next Communication</th>\r\n//                 <th>Highlight</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {lists.length > 0 ? (\r\n//                 lists.map((company, index) => {\r\n//                   // Extract communications for the company\r\n//                   const lastCommunications = company.communications.filter(\r\n//                     (c) => c.status === true\r\n//                   );\r\n//                   const nextCommunications = company.communications.find(\r\n//                     (c) => c.status === false\r\n//                   );\r\n\r\n//                   return (\r\n//                     <tr key={company.companyId}>\r\n//                       <td>{index + 1}</td>\r\n//                       <td>\r\n//                         <input type=\"checkbox\" />\r\n//                       </td>\r\n//                       <td>{company.companyName}</td>\r\n//                       <td>\r\n//                         {lastCommunications.length > 0 ? (\r\n//                           <>\r\n//                             {lastCommunications.map((communication, idx) => (\r\n//                               <div key={idx}>\r\n//                                 {communication.communicationName} -{\" \"}\r\n//                                 {new Date(\r\n//                                   communication.scheduledDate\r\n//                                 ).toLocaleDateString()}\r\n//                               </div>\r\n//                             ))}\r\n//                           </>\r\n//                         ) : (\r\n//                           \"No Completed Communications\"\r\n//                         )}\r\n//                       </td>\r\n//                       <td>\r\n//                         {nextCommunications ? (\r\n//                           <>\r\n//                             {nextCommunications.communicationName} -{\" \"}\r\n//                             {new Date(\r\n//                               nextCommunications.scheduledDate\r\n//                             ).toLocaleDateString()}\r\n//                           </>\r\n//                         ) : (\r\n//                           \"No Upcoming Communication\"\r\n//                         )}\r\n//                       </td>\r\n//                       <td>\r\n//                         <button className=\"btn btn-link text-danger\">\r\n//                           Disable Highlight\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"6\" className=\"text-center\">\r\n//                     No data available\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n\r\n\r\n\r\n//               </table>\r\n//             </div>\r\n//                    <div className=\"align-items-center mt-4 pt-2 justify-content-between d-flex\">\r\n//                      <div className=\"flex-shrink-0\">\r\n//                        <div className=\"text-muted\">\r\n//                          Showing{\" \"}\r\n//                          <span className=\"fw-semibold\">{lists.length}</span> of{\" \"}\r\n//                          <span className=\"fw-semibold\">{totalRecords}</span>{\" \"}\r\n//                          Results\r\n//                        </div>\r\n//                      </div>\r\n//                      {/* <ul className=\"pagination pagination-separated pagination-sm mb-0\">\r\n//                        <li\r\n//                          className={\r\n//                            \"page-item\" + data.previousPage === null\r\n//                              ? \"disabled\"\r\n//                              : \"\"\r\n//                          }\r\n//                          onClick={() => GetFirstPageData()}\r\n//                        >\r\n//                          <Link className=\"page-link\">Previous</Link>\r\n//                        </li>\r\n//                        {renderPageNumbers}\r\n//                        <li\r\n//                          className={\r\n//                            \"page-item\" + data.nextPage === null\r\n//                              ? \"disabled\"\r\n//                              : \"\"\r\n//                          }\r\n//                          onClick={() => GetLastPageData()}\r\n//                        >\r\n//                          <Link className=\"page-link\">Next</Link>\r\n//                        </li>\r\n//                      </ul> */}\r\n//                    </div>\r\n//                  </div>\r\n//                </div>\r\n//              </div>\r\n//            </div>\r\n\r\n\r\n//  );\r\n// }\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport config from \"../../Common/Configurations/APIConfig\";\r\nimport { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\r\nimport Flatpickr from \"react-flatpickr\"; // Import Flatpickr\r\nimport \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\r\n\r\n\r\nconst initialFieldValues = {\r\n    companyId: \"00000000-0000-0000-0000-000000000000\",\r\n    companyName: \"\",\r\n    location: \"\",\r\n    linkedInProfile: \"\",\r\n    emails: \"\",\r\n    phoneNumbers: \"\",\r\n    comments: \"\",\r\n    communicationPeriodicity: \"\",\r\n};\r\n\r\nexport default function Dashboard() {\r\n    const [lists, setLists] = useState([]);\r\n    const [values, setValues] = useState(initialFieldValues);\r\n    const [recordForEdit, setRecordForEdit] = useState(null);\r\n    const [errors, setErrors] = useState({});\r\n    const [btnSubmit, setBtnSubmit] = useState(true);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [data, setData] = useState([]);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedCommunication, setSelectedCommunication] = useState(\"\");\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [notes, setNotes] = useState(\"\");\r\n    const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\r\n    const [selectedCompanies, setSelectedCompanies] = useState([]);\r\n    const [communications, setCommunications] = useState([]);\r\n\r\n\r\n    const headerConfig = {\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (recordForEdit !== null) {\r\n            setValues(recordForEdit);\r\n        }\r\n    }, [recordForEdit]);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const validate = () => {\r\n        let temp = {};\r\n        temp.companyName = values.companyName !== \"\";\r\n        temp.location = values.location !== \"\";\r\n        temp.linkedInProfile = values.linkedInProfile !== \"\";\r\n        temp.emails = values.emails !== \"\";\r\n        temp.phoneNumbers = values.phoneNumbers !== \"\";\r\n        temp.comments = values.comments !== \"\";\r\n        temp.communicationPeriodicity = values.communicationPeriodicity !== \"\";\r\n        setErrors(temp);\r\n        return Object.values(temp).every((x) => x === true);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            setBtnSubmit(false);\r\n            const payload = { ...values };\r\n            addOrEdit(payload);\r\n        }\r\n    };\r\n    const handleCommunicationPerformed = async () => {\r\n        if (selectedCompanies.length > 0) {\r\n            try {\r\n                // Fetch communications from the API\r\n                const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\r\n    \r\n                if (response.data && response.data.statusCode === 200) {\r\n                    // Update communications state with API data\r\n                    setCommunications(response.data.data || []);\r\n                    setShowModal(true); // Open the modal\r\n                } else {\r\n                    handleError(response.data.message || \"Failed to fetch communications.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching communications:\", error);\r\n                handleError(\"An error occurred while fetching communications.\");\r\n            }\r\n        } else {\r\n            alert(\"Please select at least one company!\");\r\n        }\r\n    };\r\n    \r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        setSelectedCompanies([]);  // Reset selected companies when closing modal\r\n    };\r\n    const handleModalSubmit = async () => {\r\n        // Payload to be sent to the backend\r\n        const updateRecord = {\r\n          selectedCompanies, // Assuming this is an array of company IDs\r\n          selectedCommunication, // Communication ID\r\n          selectedDate, // List of dates (could be an array or a single date based on your backend logic)\r\n          notes, // The notes entered in the modal\r\n        };\r\n      \r\n        try {\r\n          // Make the PUT request with the provided format\r\n          const response = await axios.put(\r\n            `${config.APIACTIVATEURL}${config.UPDATECOMPANYMANAGEMENT}`, // API URL\r\n            updateRecord, // Payload with the data\r\n            headerConfig // Header configuration with Authorization and Content-Type\r\n          );\r\n      \r\n          // Handle response\r\n          if (response.data.statusCode === 200) {\r\n            handleSuccess(\"Status updated successfully.\");\r\n            // You can add more success logic here (like closing the modal, etc.)\r\n          } else {\r\n            handleError(response.data.message || \"Failed to update status.\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error in updating status:\", error);\r\n          handleError(\"An error occurred while updating the status.\");\r\n        }\r\n      };\r\n\r\n    const handleCheckboxChange = (companyId) => {\r\n        setSelectedCompanies((prevSelectedCompanies) => {\r\n            if (prevSelectedCompanies.includes(companyId)) {\r\n                // Deselect company\r\n                return prevSelectedCompanies.filter((id) => id !== companyId);\r\n            } else {\r\n                // Select company\r\n                return [...prevSelectedCompanies, companyId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Open the modal\r\n    const openModal = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    // Close the modal\r\n\r\n    const isToday = (date) => {\r\n        const today = new Date();\r\n        return (\r\n            date.getDate() === today.getDate() &&\r\n            date.getMonth() === today.getMonth() &&\r\n            date.getFullYear() === today.getFullYear()\r\n        );\r\n    };\r\n    const isPast = (date) => date < new Date();\r\n\r\n    // const applicationAPI = () => {\r\n    //     return {\r\n    //         create: (newRecord) =>\r\n    //             axios.post(\r\n    //                 `${config.APIACTIVATEURL}${config.CREATECOMPANYMANAGEMENT}`,\r\n    //                 newRecord,\r\n    //                 headerConfig\r\n    //             ),\r\n    //         update: (updateRecord) =>\r\n    //             axios.put(\r\n    //                 `${config.APIACTIVATEURL}${config.UPDATECOMPANYMANAGEMENT}`,\r\n    //                 updateRecord,\r\n    //                 headerConfig\r\n    //             ),\r\n    //     };\r\n    // };\r\n\r\n    // const addOrEdit = (payload) => {\r\n    //     if (payload.companyId === initialFieldValues.companyId) {\r\n    //         applicationAPI()\r\n    //             .create(payload)\r\n    //             .then((res) => {\r\n    //                 if (res.data.statusCode === 200) {\r\n    //                     handleSuccess(\"Record Created\");\r\n    //                     resetForm();\r\n    //                     getData(pageNumber);\r\n    //                 } else {\r\n    //                     handleError(res.data.message);\r\n    //                 }\r\n    //             })\r\n    //             .catch(() => {\r\n    //                 handleError(\"Error in saving data\");\r\n    //             })\r\n    //             .finally(() => setBtnSubmit(true));\r\n    //     } else {\r\n    //         applicationAPI()\r\n    //             .update(payload)\r\n    //             .then((res) => {\r\n    //                 if (res.data.statusCode === 200) {\r\n    //                     handleSuccess(\"Record Updated\");\r\n    //                     resetForm();\r\n    //                     getData(pageNumber);\r\n    //                 } else {\r\n    //                     handleError(res.data.message);\r\n    //                 }\r\n    //             })\r\n    //             .catch(() => {\r\n    //                 handleError(\"Error in updating data\");\r\n    //             })\r\n    //             .finally(() => setBtnSubmit(true));\r\n    //     }\r\n    // };\r\n\r\n    const resetForm = () => {\r\n        setValues(initialFieldValues);\r\n        setErrors({});\r\n    };\r\n\r\n    const showEditDetails = (data) => {\r\n        setRecordForEdit(data);\r\n    };\r\n\r\n    const getData = (number) => {\r\n        axios\r\n            .get(\r\n                `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\r\n                headerConfig\r\n            )\r\n            .then((response) => {\r\n                setLists(response.data.data);\r\n                setPageNumber(response.data.data.pageNumber);\r\n                setPageSize(response.data.data.pageSize);\r\n                setTotalPages(response.data.data.totalPages);\r\n                setData(response.data.data);\r\n                setTotalRecords(response.data.data.totalRecords);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData(pageNumber);\r\n    }, []);\r\n\r\n    const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\r\n        const page = index + 1;\r\n        return (\r\n            <li\r\n                className=\"page-item\"\r\n                key={page}\r\n                onClick={() => getData(page)}\r\n            >\r\n                <Link className=\"page-link\">{page}</Link>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-xl-12\">\r\n                <div className=\"card card-height-100\">\r\n                    <div className=\"card-header align-items-center d-flex\">\r\n                        <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\r\n\r\n                        <button\r\n                            className=\"btn btn-primary ms-auto\"\r\n                            onClick={handleCommunicationPerformed}\r\n                            disabled={selectedCompanies.length === 0} // Disable button if no company is selected\r\n                        >\r\n                            Communication Performed\r\n                        </button>\r\n\r\n                    </div>\r\n                    {/* Modal */}\r\n                    {showModal && (\r\n                        <div\r\n                            style={{\r\n                                position: 'fixed',\r\n                                top: '50%',\r\n                                left: '50%',\r\n                                transform: 'translate(-50%, -50%)',\r\n                                background: 'white',\r\n                                border: '1px solid #ccc',\r\n                                borderRadius: '8px',\r\n                                width: '400px',\r\n                                boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n                                zIndex: 1000,\r\n                                padding: '20px',\r\n                            }}\r\n                        >\r\n                            <div>\r\n                                <h5>Communication Performed</h5>\r\n                                <hr />\r\n                            </div>\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <div style={{ marginBottom: \"10px\" }}>\r\n    <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\r\n        Communication:\r\n    </label>\r\n    <select\r\n        id=\"communicationSelect\"\r\n        style={{\r\n            width: \"100%\",\r\n            padding: \"8px\",\r\n            marginTop: \"5px\",\r\n            border: \"1px solid #ccc\",\r\n            borderRadius: \"4px\",\r\n        }}\r\n        value={selectedCommunication}\r\n        onChange={(e) => setSelectedCommunication(e.target.value)}\r\n    >\r\n        <option value=\"\">Select Communication</option>\r\n        {communications.map((comm) => (\r\n            <option key={comm.communicationId} value={comm.communicationId}>\r\n                {comm.communicationName}\r\n            </option>\r\n        ))}\r\n    </select>\r\n</div>\r\n\r\n                                {/* Flatpickr for Date */}\r\n                                <div style={{ marginBottom: '10px' }}>\r\n                                    <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\r\n                                    <Flatpickr\r\n                                        id=\"updatedDate\"\r\n                                        value={selectedDate}\r\n                                        onChange={(date) => setSelectedDate(date)}\r\n                                        options={{ dateFormat: 'Y-m-d' }}\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '8px',\r\n                                            marginTop: '5px',\r\n                                            border: '1px solid #ccc',\r\n                                            borderRadius: '4px',\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                {/* Notes Textarea */}\r\n                                <div>\r\n                                    <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\r\n                                    <textarea\r\n                                        id=\"notes\"\r\n                                        value={notes}\r\n                                        onChange={(e) => setNotes(e.target.value)}\r\n                                        rows=\"4\"\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '8px',\r\n                                            marginTop: '5px',\r\n                                            border: '1px solid #ccc',\r\n                                            borderRadius: '4px',\r\n                                        }}\r\n                                    ></textarea>\r\n                                </div>\r\n                            </div>\r\n                            {/* Footer Buttons */}\r\n                            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n                                <button\r\n                                    style={{\r\n                                        padding: '8px 16px',\r\n                                        background: '#ccc',\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={handleCloseModal}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button\r\n                                    style={{\r\n                                        padding: '8px 16px',\r\n                                        background: '#007bff',\r\n                                        color: 'white',\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={handleModalSubmit}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"card-body\">\r\n                        <div className=\"table-responsive table-card\">\r\n                            <table className=\"table align-middle\">\r\n                                <thead className=\"table-light\">\r\n                                    <tr>\r\n                                        <th>S.No</th>\r\n                                        <th>Select</th>\r\n                                        <th>Company Name</th>\r\n                                        <th>Last Communication</th>\r\n                                        <th>Next Communication</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {lists.length > 0 ? (\r\n                                        lists.map((company, index) => {\r\n                                            // Extract communications for the company\r\n                                            const lastCommunications = company.communications.filter(\r\n                                                (c) => c.status === true\r\n                                            );\r\n                                            const nextCommunications = company.communications.find(\r\n                                                (c) => c.status === false\r\n                                            );\r\n\r\n                                            return (\r\n                                                <tr key={company.companyId}>\r\n                                                    <td>{index + 1}</td>\r\n                                                    <td>\r\n                                                        <input\r\n                                                            type=\"checkbox\"\r\n                                                            checked={selectedCompanies.includes(company.companyId)}\r\n                                                            onChange={() => handleCheckboxChange(company.companyId)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>{company.companyName}</td>\r\n                                                    <td>\r\n                                                        {lastCommunications.length > 0 ? (\r\n                                                            <>\r\n                                                                {lastCommunications.map((communication, idx) => (\r\n                                                                    <div key={idx}>\r\n                                                                        {communication.communicationName} -{\" \"}\r\n                                                                        {new Date(\r\n                                                                            communication.scheduledDate\r\n                                                                        ).toLocaleDateString()}\r\n                                                                    </div>\r\n                                                                ))}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            \"No Completed Communications\"\r\n                                                        )}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {nextCommunications ? (\r\n                                                            <>\r\n                                                                <span\r\n                                                                    style={{\r\n                                                                        color: isToday(new Date(nextCommunications.scheduledDate))\r\n                                                                            ? \"yellow\"\r\n                                                                            : isPast(new Date(nextCommunications.scheduledDate))\r\n                                                                                ? \"red\"\r\n                                                                                : \"inherit\",\r\n                                                                        fontWeight: \"bold\", // Make the text bold\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {nextCommunications.communicationName}\r\n                                                                </span>{\" \"}\r\n                                                                -{\" \"}\r\n                                                                {new Date(nextCommunications.scheduledDate).toLocaleDateString()}\r\n                                                                <br />\r\n                                                                <button className=\"btn btn-link text-danger\">\r\n                                                                    Disable Highlight\r\n                                                                </button>\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            \"No Upcoming Communication\"\r\n                                                        )}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colSpan=\"6\" className=\"text-center\">\r\n                                                No data available\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"align-items-center mt-4 pt-2 justify-content-between d-flex\">\r\n                            <div className=\"flex-shrink-0\">\r\n                                <div className=\"text-muted\">\r\n                                    Showing{\" \"}\r\n                                    <span className=\"fw-semibold\">{lists.length}</span> of{\" \"}\r\n                                    <span className=\"fw-semibold\">{totalRecords}</span>{\" \"}\r\n                                    Results\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}