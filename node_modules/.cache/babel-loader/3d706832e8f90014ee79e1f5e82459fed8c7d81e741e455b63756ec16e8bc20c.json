{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md Asif\\\\Desktop\\\\CALENDAR FRONTEND\\\\src\\\\Components\\\\UserModule\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import config from \"../../Common/Configurations/APIConfig\";\n// import { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\n// import Flatpickr from \"react-flatpickr\"; // Import Flatpickr\n// import \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\n// import moment from \"moment\";\n// import LayoutHeader from \"../../Common/Layout/Header\";\n// import LayoutSideBar from \"../../Common/Layout/Sidebar\";\n\n// export default function Dashboard() {\n//     const [lists, setLists] = useState([]);\n//     const [recordForEdit, setRecordForEdit] = useState(null);\n//     const [errors, setErrors] = useState({});\n//     const [btnSubmit, setBtnSubmit] = useState(true);\n//     const [totalPages, setTotalPages] = useState(0);\n//     const [pageSize, setPageSize] = useState(20);\n//     const [pageNumber, setPageNumber] = useState(1);\n//     const [data, setData] = useState([]);\n//     const [totalRecords, setTotalRecords] = useState(0);\n//     const [showModal, setShowModal] = useState(false);\n//     const [selectedCommunication, setSelectedCommunication] = useState(\"\");\n//     const [selectedDate, setSelectedDate] = useState(new Date());\n//     const [notes, setNotes] = useState(\"\");\n//     const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\n//     const [selectedCompanies, setSelectedCompanies] = useState([]);\n//     const [communications, setCommunications] = useState([]);\n\n//     const headerConfig = {\n//         headers: {\n//             Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\n//             \"Content-Type\": \"application/json\",\n//         },\n//     };\n\n//     const validate = () => {\n//         let temp = {};\n//         temp.selectedCommunication = selectedCommunication ? true : \"Please select a communication.\";\n//         temp.selectedDate = selectedDate.length > 0 ? true : \"Please select a date.\";\n//         temp.notes = notes.trim() ? true : \"Notes cannot be empty.\";\n\n//         setErrors(temp);\n//         return Object.values(temp).every((x) => x === true);\n//     };\n\n//     const handleCommunicationPerformed = async () => {\n//         if (selectedCompanies.length > 0) {\n//             try {\n//                 // Fetch communications from the API\n//                 const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\n\n//                 if (response.data && response.data.statusCode === 200) {\n//                     // Update communications state with API data\n//                     setCommunications(response.data.data || []);\n//                     setShowModal(true); // Open the modal\n//                 } else {\n//                     handleError(response.data.message || \"Failed to fetch communications.\");\n//                 }\n//             } catch (error) {\n//                 console.error(\"Error fetching communications:\", error);\n//                 handleError(\"An error occurred while fetching communications.\");\n//             }\n//         } else {\n//             alert(\"Please select at least one company!\");\n//         }\n//     };\n\n//     const handleCloseModal = () => {\n//         setShowModal(false);\n//         setSelectedCompanies([]);           // Reset selected companies\n//     setSelectedCommunication(\"\");      // Reset selected communication\n//     setSelectedDate([]);               // Reset selected date\n//     setNotes(\"\");                      // Clear notes\n//     setErrors({});   \n//     };\n//     const handleModalSubmit = async () => {\n//         if (!validate()) return; // If validation fails, stop submission\n\n//         // Payload to be sent to the backend\n//         const updateRecord = {\n//             selectedCompanies, // Assuming this is an array of company IDs\n//             selectedCommunication, // Communication ID\n//             selectedDate, // List of dates (could be an array or a single date based on your backend logic)\n//             notes, // The notes entered in the modal\n//         };\n\n//         try {\n//             // Make the PUT request with the provided format\n//             const response = await axios.put(\n//                 `${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`, // API URL\n//                 updateRecord, // Payload with the data\n//                 headerConfig // Header configuration with Authorization and Content-Type\n//             );\n\n//             // Handle response\n//             if (response.data.statusCode === 200) {\n//                 handleSuccess(\"Status updated successfully.\");\n//                 getData(pageNumber);\n//                 // You can add more success logic here (like closing the modal, etc.)\n//             } else {\n//                 handleError(response.data.message || \"Failed to update status.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error in updating status:\", error);\n//             handleError(\"An error occurred while updating the status.\");\n//         }\n//     };\n\n//     const handleCheckboxChange = (companyId) => {\n//         setSelectedCompanies((prevSelectedCompanies) => {\n//             if (prevSelectedCompanies.includes(companyId)) {\n//                 // Deselect company\n//                 return prevSelectedCompanies.filter((id) => id !== companyId);\n//             } else {\n//                 // Select company\n//                 return [...prevSelectedCompanies, companyId];\n//             }\n//         });\n//     };\n\n//     // Open the modal\n\n//     const isToday = (date) => {\n//         const today = new Date();\n//         return (\n//             date.getDate() === today.getDate() &&\n//             date.getMonth() === today.getMonth() &&\n//             date.getFullYear() === today.getFullYear()\n//         );\n//     };\n//     const isPast = (date) => date < new Date();\n\n//     const resetForm = () => {\n\n//         setErrors({});\n//     };\n\n//     const getData = (number) => {\n//         axios\n//             .get(\n//                 `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\n//                 headerConfig\n//             )\n//             .then((response) => {\n//                 setLists(response.data.data);\n//                 setPageNumber(response.data.data.pageNumber);\n//                 setPageSize(response.data.data.pageSize);\n//                 setTotalPages(response.data.data.totalPages);\n//                 setData(response.data.data);\n//                 setTotalRecords(response.data.data.totalRecords);\n//             });\n//     };\n\n//     useEffect(() => {\n//         getData(pageNumber);\n//     }, []);\n\n//     const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\n//         const page = index + 1;\n//         return (\n//             <li\n//                 className=\"page-item\"\n//                 key={page}\n//                 onClick={() => getData(page)}\n//             >\n//                 <Link className=\"page-link\">{page}</Link>\n//             </li>\n//         );\n//     });\n//     return (\n//         <div id=\"layout-wrapper\">\n//             <LayoutHeader />\n//             <LayoutSideBar />\n//             <div className=\"row\" style={{\n//                 paddingTop: '150px',   // Padding for the top\n//                 paddingLeft: '50px',\n//                 paddingRight: '20px',\n//             }}> {/* Add padding to the row */}\n//                 <div className=\"col-xl-12\">\n//                     <div className=\"card card-height-100\">\n//                         <div className=\"card-header align-items-center d-flex\">\n//                             <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\n\n//                             <button\n//                                 className=\"btn btn-primary ms-auto\"\n//                                 onClick={handleCommunicationPerformed}\n//                                 disabled={selectedCompanies.length === 0} // Disable button if no company is selected\n//                             >\n//                                 Communication Performed\n//                             </button>\n//                         </div>\n\n//                         {/* Modal */}\n//                         {showModal && (\n//                             <div\n//                                 style={{\n//                                     position: 'fixed',\n//                                     top: '50%',\n//                                     left: '50%',\n//                                     transform: 'translate(-50%, -50%)',\n//                                     background: 'white',\n//                                     border: '1px solid #ccc',\n//                                     borderRadius: '8px',\n//                                     width: '400px',\n//                                     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n//                                     zIndex: 1000,\n//                                     padding: '20px',\n//                                 }}\n//                             >\n//                                 <div>\n//                                     <h5>Communication Performed</h5>\n//                                     <hr />\n//                                 </div>\n//                                 <div style={{ marginBottom: '20px' }}>\n//                                     {/* Communication Select */}\n//                                     <div style={{ marginBottom: \"10px\" }}>\n//                                         <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\n//                                             Communication:\n//                                         </label>\n//                                         <select\n//                                             id=\"communicationSelect\"\n//                                             style={{\n//                                                 width: \"100%\",\n//                                                 padding: \"8px\",\n//                                                 marginTop: \"5px\",\n//                                                 border: \"1px solid #ccc\",\n//                                                 borderRadius: \"4px\",\n//                                             }}\n//                                             value={selectedCommunication}\n//                                             onChange={(e) => setSelectedCommunication(e.target.value)}\n//                                         >\n//                                             <option value=\"\">Select Communication</option>\n//                                             {communications.map((comm) => (\n//                                                 <option key={comm.communicationId} value={comm.communicationId}>\n//                                                     {comm.communicationName}\n//                                                 </option>\n//                                             ))}\n//                                         </select>\n//                                         {errors.selectedCommunication && (\n//                         <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.selectedCommunication}</span>\n//                     )}\n//                                     </div>\n\n//                                     {/* Flatpickr for Date */}\n//                                     <div style={{ marginBottom: '10px' }}>\n//                                         <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\n//                                         <Flatpickr\n//                                             id=\"updatedDate\"\n//                                             value={selectedDate}\n//                                             onChange={(date) => setSelectedDate(date)}\n//                                             options={{ dateFormat: 'Y-m-d' }}\n//                                             style={{\n//                                                 width: '100%',\n//                                                 padding: '8px',\n//                                                 marginTop: '5px',\n//                                                 border: '1px solid #ccc',\n//                                                 borderRadius: '4px',\n//                                             }}\n//                                         />\n//                                         {errors.selectedDate && (\n//                         <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.selectedDate}</span>\n//                     )}\n//                                     </div>\n\n//                                     {/* Notes Textarea */}\n//                                     <div>\n//                                         <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\n//                                         <textarea\n//                                             id=\"notes\"\n//                                             value={notes}\n//                                             onChange={(e) => setNotes(e.target.value)}\n//                                             rows=\"4\"\n//                                             style={{\n//                                                 width: '100%',\n//                                                 padding: '8px',\n//                                                 marginTop: '5px',\n//                                                 border: '1px solid #ccc',\n//                                                 borderRadius: '4px',\n//                                             }}\n//                                         ></textarea>\n//                                         {errors.notes && (\n//                         <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.notes}</span>\n//                     )}\n//                                     </div>\n//                                 </div>\n\n//                                 {/* Footer Buttons */}\n//                                 <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\n//                                     <button\n//                                         style={{\n//                                             padding: '8px 16px',\n//                                             background: '#ccc',\n//                                             border: 'none',\n//                                             borderRadius: '4px',\n//                                             cursor: 'pointer',\n//                                         }}\n//                                         onClick={handleCloseModal}\n//                                     >\n//                                         Cancel\n//                                     </button>\n//                                     <button\n//                                         style={{\n//                                             padding: '8px 16px',\n//                                             background: '#007bff',\n//                                             color: 'white',\n//                                             border: 'none',\n//                                             borderRadius: '4px',\n//                                             cursor: 'pointer',\n//                                         }}\n//                                         onClick={handleModalSubmit}\n//                                     >\n//                                         Submit\n//                                     </button>\n//                                 </div>\n//                             </div>\n//                         )}\n\n//                         {/* Table */}\n//                         <div className=\"card-body\" style={{ padding: '20px' }}> {/* Add padding to the card-body */}\n//                             <div className=\"table-responsive table-card\" style={{ padding: '10px' }}> {/* Add padding here */}\n//                                 <table className=\"table align-middle\">\n//                                     <thead className=\"table-light\">\n//                                         <tr>\n//                                             <th>S.No</th>\n//                                             <th>Select</th>\n//                                             <th>Company Name</th>\n//                                             <th>Last Communication</th>\n//                                             <th>Next Communication</th>\n//                                         </tr>\n//                                     </thead>\n//                                     <tbody>\n//                                         {lists.length > 0 ? (\n//                                             lists.map((company, index) => {\n//                                                 // Extract communications for the company\n//                                                 const lastCommunications = company.communications.filter(\n//                                                     (c) => c.status === true\n//                                                 );\n//                                                 const nextCommunications = company.communications.find(\n//                                                     (c) => c.status === false\n//                                                 );\n\n//                                                 return (\n//                                                     <tr key={company.companyId}>\n//                                                         <td>{index + 1}</td>\n//                                                         <td>\n//                                                             <input\n//                                                                 type=\"checkbox\"\n//                                                                 checked={selectedCompanies.includes(company.companyId)}\n//                                                                 onChange={() => handleCheckboxChange(company.companyId)}\n//                                                             />\n//                                                         </td>\n//                                                         <td>{company.companyName}</td>\n//                                                         <td>\n//                                                             {lastCommunications.length > 0 ? (\n//                                                                 <>\n//                                                                     {lastCommunications.map((communication, idx) => (\n//                                                                         <div key={idx}>\n//                                                                             {communication.communicationName} -{\" \"}\n//                                                                             {moment(communication.scheduledDate).format('DD/MM/YYYY')}\n//                                                                         </div>\n//                                                                     ))}\n//                                                                 </>\n//                                                             ) : (\n//                                                                 \"No Completed Communications\"\n//                                                             )}\n//                                                         </td>\n//                                                         <td>\n//                                                             {nextCommunications ? (\n//                                                                 <>\n//                                                                     <span\n//                                                                         style={{\n//                                                                             color: isToday(new Date(nextCommunications.scheduledDate))\n//                                                                                 ? \"yellow\"\n//                                                                                 : isPast(new Date(nextCommunications.scheduledDate))\n//                                                                                     ? \"red\"\n//                                                                                     : \"inherit\",\n//                                                                             fontWeight: \"bold\",\n//                                                                         }}\n//                                                                     >\n//                                                                         {nextCommunications.communicationName}\n//                                                                     </span>{\" \"}\n//                                                                     -{\" \"}\n//                                                                     {moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')}\n//                                                                 </>\n//                                                             ) : (\n//                                                                 \"No Upcoming Communication\"\n//                                                             )}\n//                                                         </td>\n//                                                     </tr>\n//                                                 );\n//                                             })\n//                                         ) : (\n//                                             <tr>\n//                                                 <td colSpan=\"6\" className=\"text-center\">\n//                                                     No data available\n//                                                 </td>\n//                                             </tr>\n//                                         )}\n//                                     </tbody>\n//                                 </table>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }    \n\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport config from \"../../Common/Configurations/APIConfig\";\nimport { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\nimport Flatpickr from \"react-flatpickr\"; // Import Flatpickr\nimport \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\nimport moment from \"moment\";\nimport LayoutHeader from \"../../Common/Layout/Header\";\nimport LayoutSideBar from \"../../Common/Layout/Sidebar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [lists, setLists] = useState([]);\n  const [recordForEdit, setRecordForEdit] = useState(null);\n  const [errors, setErrors] = useState({});\n  const [btnSubmit, setBtnSubmit] = useState(true);\n  const [totalPages, setTotalPages] = useState(0);\n  const [pageSize, setPageSize] = useState(20);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [data, setData] = useState([]);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedCommunication, setSelectedCommunication] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [notes, setNotes] = useState(\"\");\n  const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\n  const [selectedCompanies, setSelectedCompanies] = useState([]);\n  const [communications, setCommunications] = useState([]);\n  const headerConfig = {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const [disabledHighlights, setDisabledHighlights] = useState(() => {\n    return JSON.parse(localStorage.getItem(\"disabledHighlights\")) || [];\n  });\n  const handleDisableHighlight = communicationId => {\n    setDisabledHighlights(prev => {\n      const updated = [...prev, communicationId];\n      localStorage.setItem(\"disabledHighlights\", JSON.stringify(updated));\n      return updated;\n    });\n  };\n  useEffect(() => {\n    const savedHighlights = JSON.parse(localStorage.getItem(\"disabledHighlights\"));\n    if (savedHighlights) {\n      setDisabledHighlights(savedHighlights);\n    }\n  }, []);\n  const validate = () => {\n    let temp = {};\n    temp.selectedCommunication = selectedCommunication ? true : \"Please select a communication.\";\n    temp.selectedDate = selectedDate.length > 0 ? true : \"Please select a date.\";\n    temp.notes = notes.trim() ? true : \"Notes cannot be empty.\";\n    setErrors(temp);\n    return Object.values(temp).every(x => x === true);\n  };\n  const handleCommunicationPerformed = async () => {\n    if (selectedCompanies.length > 0) {\n      try {\n        // Fetch communications from the API\n        const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\n        if (response.data && response.data.statusCode === 200) {\n          // Update communications state with API data\n          setCommunications(response.data.data || []);\n          setShowModal(true); // Open the modal\n        } else {\n          handleError(response.data.message || \"Failed to fetch communications.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching communications:\", error);\n        handleError(\"An error occurred while fetching communications.\");\n      }\n    } else {\n      alert(\"Please select at least one company!\");\n    }\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedCompanies([]); // Reset selected companies\n    setSelectedCommunication(\"\"); // Reset selected communication\n    setSelectedDate([]); // Reset selected date\n    setNotes(\"\"); // Clear notes\n    setErrors({});\n  };\n  const handleModalSubmit = async () => {\n    if (!validate()) return; // If validation fails, stop submission\n\n    // Payload to be sent to the backend\n    const updateRecord = {\n      selectedCompanies,\n      // Assuming this is an array of company IDs\n      selectedCommunication,\n      // Communication ID\n      selectedDate,\n      // List of dates (could be an array or a single date based on your backend logic)\n      notes // The notes entered in the modal\n    };\n    try {\n      // Make the PUT request with the provided format\n      const response = await axios.put(`${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`,\n      // API URL\n      updateRecord,\n      // Payload with the data\n      headerConfig // Header configuration with Authorization and Content-Type\n      );\n\n      // Handle response\n      if (response.data.statusCode === 200) {\n        handleSuccess(\"Status updated successfully.\");\n        getData(pageNumber);\n        // You can add more success logic here (like closing the modal, etc.)\n      } else {\n        handleError(response.data.message || \"Failed to update status.\");\n      }\n    } catch (error) {\n      console.error(\"Error in updating status:\", error);\n      handleError(\"An error occurred while updating the status.\");\n    }\n  };\n  const handleCheckboxChange = companyId => {\n    setSelectedCompanies(prevSelectedCompanies => {\n      if (prevSelectedCompanies.includes(companyId)) {\n        // Deselect company\n        return prevSelectedCompanies.filter(id => id !== companyId);\n      } else {\n        // Select company\n        return [...prevSelectedCompanies, companyId];\n      }\n    });\n  };\n\n  // Open the modal\n\n  const isToday = date => {\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  };\n  const isPast = date => date < new Date();\n  const resetForm = () => {\n    setErrors({});\n  };\n  const getData = number => {\n    axios.get(`${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`, headerConfig).then(response => {\n      setLists(response.data.data);\n      setPageNumber(response.data.data.pageNumber);\n      setPageSize(response.data.data.pageSize);\n      setTotalPages(response.data.data.totalPages);\n      setData(response.data.data);\n      setTotalRecords(response.data.data.totalRecords);\n    });\n  };\n  useEffect(() => {\n    getData(pageNumber);\n  }, []);\n  const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\n    const page = index + 1;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"page-item\",\n      onClick: () => getData(page),\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        className: \"page-link\",\n        children: page\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 17\n      }, this)\n    }, page, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"layout-wrapper\",\n    style: {\n      backgroundColor: \"#F08080\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(LayoutHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LayoutSideBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      style: {\n        paddingTop: '150px',\n        // Padding for the top\n        paddingLeft: '50px',\n        paddingRight: '20px'\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xl-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-height-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header align-items-center d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"card-title mb-0 flex-grow-1\",\n              children: \"Communications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary ms-auto\",\n              onClick: handleCommunicationPerformed,\n              disabled: selectedCompanies.length === 0 // Disable button if no company is selected\n              ,\n              children: \"Communication Performed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 25\n          }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'fixed',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              background: 'white',\n              border: '1px solid #ccc',\n              borderRadius: '8px',\n              width: '400px',\n              boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n              zIndex: 1000,\n              padding: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Communication Performed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '20px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: \"10px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"communicationSelect\",\n                  style: {\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Communication:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 671,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"communicationSelect\",\n                  style: {\n                    width: \"100%\",\n                    padding: \"8px\",\n                    marginTop: \"5px\",\n                    border: \"1px solid #ccc\",\n                    borderRadius: \"4px\"\n                  },\n                  value: selectedCommunication,\n                  onChange: e => setSelectedCommunication(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Communication\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 686,\n                    columnNumber: 45\n                  }, this), communications.map(comm => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: comm.communicationId,\n                    children: comm.communicationName\n                  }, comm.communicationId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 688,\n                    columnNumber: 49\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 674,\n                  columnNumber: 41\n                }, this), errors.selectedCommunication && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\",\n                    fontSize: \"12px\"\n                  },\n                  children: errors.selectedCommunication\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: '10px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"updatedDate\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"Updated Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Flatpickr, {\n                  id: \"updatedDate\",\n                  value: selectedDate,\n                  onChange: date => setSelectedDate(date),\n                  options: {\n                    dateFormat: 'Y-m-d'\n                  },\n                  style: {\n                    width: '100%',\n                    padding: '8px',\n                    marginTop: '5px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 41\n                }, this), errors.selectedDate && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\",\n                    fontSize: \"12px\"\n                  },\n                  children: errors.selectedDate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 715,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"notes\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"Add Notes:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 721,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  id: \"notes\",\n                  value: notes,\n                  onChange: e => setNotes(e.target.value),\n                  rows: \"4\",\n                  style: {\n                    width: '100%',\n                    padding: '8px',\n                    marginTop: '5px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 722,\n                  columnNumber: 41\n                }, this), errors.notes && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\",\n                    fontSize: \"12px\"\n                  },\n                  children: errors.notes\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 736,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 720,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end',\n                gap: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  padding: '8px 16px',\n                  background: '#ccc',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer'\n                },\n                onClick: handleCloseModal,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  padding: '8px 16px',\n                  background: '#007bff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer'\n                },\n                onClick: handleModalSubmit,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 755,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            style: {\n              padding: '20px'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-responsive table-card\",\n              style: {\n                padding: '10px'\n              },\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"table align-middle\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  className: \"table-light\",\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"S.No\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 778,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Select\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 779,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Company Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 780,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Last Communication\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 781,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Next Communication\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 782,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 777,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: lists.length > 0 ? lists.map((company, index) => {\n                    // Extract communications for the company\n                    const lastCommunications = company.communications.filter(c => c.status === true);\n                    const nextCommunications = company.communications.find(c => c.status === false);\n                    return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: index + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 798,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"checkbox\",\n                          checked: selectedCompanies.includes(company.companyId),\n                          onChange: () => handleCheckboxChange(company.companyId)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 800,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 799,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: company.companyName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 806,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: lastCommunications.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: lastCommunications.map((communication, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: [communication.communicationName, \" -\", \" \", moment(communication.scheduledDate).format('DD/MM/YYYY')]\n                          }, idx, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 811,\n                            columnNumber: 73\n                          }, this))\n                        }, void 0, false) : \"No Completed Communications\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 807,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: nextCommunications ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: /*#__PURE__*/_jsxDEV(\"td\", {\n                            children: nextCommunications ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                                style: {\n                                  color: disabledHighlights.includes(nextCommunications.communicationId) ? \"inherit\" : isToday(new Date(nextCommunications.scheduledDate)) ? \"yellow\" : isPast(new Date(nextCommunications.scheduledDate)) ? \"red\" : \"inherit\",\n                                  fontWeight: \"bold\"\n                                },\n                                children: nextCommunications.communicationName\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 827,\n                                columnNumber: 13\n                              }, this), \" \", \"-\", \" \", moment(nextCommunications.scheduledDate).format('DD/MM/YYYY'), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 843,\n                                columnNumber: 13\n                              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                                style: {\n                                  color: \"blue\",\n                                  textDecoration: \"underline\",\n                                  cursor: \"pointer\"\n                                },\n                                onClick: () => handleDisableHighlight(nextCommunications.communicationId),\n                                children: \"Disable Highlight\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 844,\n                                columnNumber: 13\n                              }, this)]\n                            }, void 0, true) : \"No Upcoming Communication\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 824,\n                            columnNumber: 30\n                          }, this)\n                        }, void 0, false) : \"No Upcoming Communication\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 821,\n                        columnNumber: 57\n                      }, this)]\n                    }, company.companyId, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 797,\n                      columnNumber: 53\n                    }, this);\n                  }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: /*#__PURE__*/_jsxDEV(\"td\", {\n                      colSpan: \"6\",\n                      className: \"text-center\",\n                      children: \"No data available\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 869,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 868,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 625,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"5iCoZ+z4LFIymKO9uSoUGnbkmog=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Link","useState","useEffect","axios","config","handleSuccess","handleError","Flatpickr","moment","LayoutHeader","LayoutSideBar","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","lists","setLists","recordForEdit","setRecordForEdit","errors","setErrors","btnSubmit","setBtnSubmit","totalPages","setTotalPages","pageSize","setPageSize","pageNumber","setPageNumber","data","setData","totalRecords","setTotalRecords","showModal","setShowModal","selectedCommunication","setSelectedCommunication","selectedDate","setSelectedDate","Date","notes","setNotes","selectedCompany","setSelectedCompany","selectedCompanies","setSelectedCompanies","communications","setCommunications","headerConfig","headers","Authorization","localStorage","getItem","disabledHighlights","setDisabledHighlights","JSON","parse","handleDisableHighlight","communicationId","prev","updated","setItem","stringify","savedHighlights","validate","temp","length","trim","Object","values","every","x","handleCommunicationPerformed","response","get","APIACTIVATEURL","GETALLCOMMUNICATIONMANAGEMENT","statusCode","message","error","console","alert","handleCloseModal","handleModalSubmit","updateRecord","put","UPDATECOMMUNICATION","getData","handleCheckboxChange","companyId","prevSelectedCompanies","includes","filter","id","isToday","date","today","getDate","getMonth","getFullYear","isPast","resetForm","number","GETCOMMUNICATION","then","renderPageNumbers","Array","map","_","index","page","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","paddingTop","paddingLeft","paddingRight","disabled","position","top","left","transform","background","border","borderRadius","width","boxShadow","zIndex","padding","marginBottom","htmlFor","fontWeight","marginTop","value","onChange","e","target","comm","communicationName","color","fontSize","options","dateFormat","rows","display","justifyContent","gap","cursor","company","lastCommunications","c","status","nextCommunications","find","type","checked","companyName","communication","idx","scheduledDate","format","textDecoration","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/Md Asif/Desktop/CALENDAR FRONTEND/src/Components/UserModule/Dashboard.js"],"sourcesContent":["\r\n// import { Link } from \"react-router-dom\";\r\n// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import config from \"../../Common/Configurations/APIConfig\";\r\n// import { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\r\n// import Flatpickr from \"react-flatpickr\"; // Import Flatpickr\r\n// import \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\r\n// import moment from \"moment\";\r\n// import LayoutHeader from \"../../Common/Layout/Header\";\r\n// import LayoutSideBar from \"../../Common/Layout/Sidebar\";\r\n\r\n\r\n// export default function Dashboard() {\r\n//     const [lists, setLists] = useState([]);\r\n//     const [recordForEdit, setRecordForEdit] = useState(null);\r\n//     const [errors, setErrors] = useState({});\r\n//     const [btnSubmit, setBtnSubmit] = useState(true);\r\n//     const [totalPages, setTotalPages] = useState(0);\r\n//     const [pageSize, setPageSize] = useState(20);\r\n//     const [pageNumber, setPageNumber] = useState(1);\r\n//     const [data, setData] = useState([]);\r\n//     const [totalRecords, setTotalRecords] = useState(0);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [selectedCommunication, setSelectedCommunication] = useState(\"\");\r\n//     const [selectedDate, setSelectedDate] = useState(new Date());\r\n//     const [notes, setNotes] = useState(\"\");\r\n//     const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\r\n//     const [selectedCompanies, setSelectedCompanies] = useState([]);\r\n//     const [communications, setCommunications] = useState([]);\r\n\r\n\r\n//     const headerConfig = {\r\n//         headers: {\r\n//             Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\r\n//             \"Content-Type\": \"application/json\",\r\n//         },\r\n//     };\r\n\r\n\r\n\r\n\r\n\r\n//     const validate = () => {\r\n//         let temp = {};\r\n//         temp.selectedCommunication = selectedCommunication ? true : \"Please select a communication.\";\r\n//         temp.selectedDate = selectedDate.length > 0 ? true : \"Please select a date.\";\r\n//         temp.notes = notes.trim() ? true : \"Notes cannot be empty.\";\r\n    \r\n//         setErrors(temp);\r\n//         return Object.values(temp).every((x) => x === true);\r\n//     };\r\n\r\n//     const handleCommunicationPerformed = async () => {\r\n//         if (selectedCompanies.length > 0) {\r\n//             try {\r\n//                 // Fetch communications from the API\r\n//                 const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\r\n\r\n//                 if (response.data && response.data.statusCode === 200) {\r\n//                     // Update communications state with API data\r\n//                     setCommunications(response.data.data || []);\r\n//                     setShowModal(true); // Open the modal\r\n//                 } else {\r\n//                     handleError(response.data.message || \"Failed to fetch communications.\");\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error(\"Error fetching communications:\", error);\r\n//                 handleError(\"An error occurred while fetching communications.\");\r\n//             }\r\n//         } else {\r\n//             alert(\"Please select at least one company!\");\r\n//         }\r\n//     };\r\n\r\n\r\n//     const handleCloseModal = () => {\r\n//         setShowModal(false);\r\n//         setSelectedCompanies([]);           // Reset selected companies\r\n//     setSelectedCommunication(\"\");      // Reset selected communication\r\n//     setSelectedDate([]);               // Reset selected date\r\n//     setNotes(\"\");                      // Clear notes\r\n//     setErrors({});   \r\n//     };\r\n//     const handleModalSubmit = async () => {\r\n//         if (!validate()) return; // If validation fails, stop submission\r\n    \r\n//         // Payload to be sent to the backend\r\n//         const updateRecord = {\r\n//             selectedCompanies, // Assuming this is an array of company IDs\r\n//             selectedCommunication, // Communication ID\r\n//             selectedDate, // List of dates (could be an array or a single date based on your backend logic)\r\n//             notes, // The notes entered in the modal\r\n//         };\r\n\r\n//         try {\r\n//             // Make the PUT request with the provided format\r\n//             const response = await axios.put(\r\n//                 `${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`, // API URL\r\n//                 updateRecord, // Payload with the data\r\n//                 headerConfig // Header configuration with Authorization and Content-Type\r\n//             );\r\n\r\n//             // Handle response\r\n//             if (response.data.statusCode === 200) {\r\n//                 handleSuccess(\"Status updated successfully.\");\r\n//                 getData(pageNumber);\r\n//                 // You can add more success logic here (like closing the modal, etc.)\r\n//             } else {\r\n//                 handleError(response.data.message || \"Failed to update status.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error in updating status:\", error);\r\n//             handleError(\"An error occurred while updating the status.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleCheckboxChange = (companyId) => {\r\n//         setSelectedCompanies((prevSelectedCompanies) => {\r\n//             if (prevSelectedCompanies.includes(companyId)) {\r\n//                 // Deselect company\r\n//                 return prevSelectedCompanies.filter((id) => id !== companyId);\r\n//             } else {\r\n//                 // Select company\r\n//                 return [...prevSelectedCompanies, companyId];\r\n//             }\r\n//         });\r\n//     };\r\n\r\n//     // Open the modal\r\n\r\n\r\n//     const isToday = (date) => {\r\n//         const today = new Date();\r\n//         return (\r\n//             date.getDate() === today.getDate() &&\r\n//             date.getMonth() === today.getMonth() &&\r\n//             date.getFullYear() === today.getFullYear()\r\n//         );\r\n//     };\r\n//     const isPast = (date) => date < new Date();\r\n\r\n\r\n//     const resetForm = () => {\r\n\r\n//         setErrors({});\r\n//     };\r\n\r\n\r\n\r\n//     const getData = (number) => {\r\n//         axios\r\n//             .get(\r\n//                 `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\r\n//                 headerConfig\r\n//             )\r\n//             .then((response) => {\r\n//                 setLists(response.data.data);\r\n//                 setPageNumber(response.data.data.pageNumber);\r\n//                 setPageSize(response.data.data.pageSize);\r\n//                 setTotalPages(response.data.data.totalPages);\r\n//                 setData(response.data.data);\r\n//                 setTotalRecords(response.data.data.totalRecords);\r\n//             });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         getData(pageNumber);\r\n//     }, []);\r\n\r\n//     const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\r\n//         const page = index + 1;\r\n//         return (\r\n//             <li\r\n//                 className=\"page-item\"\r\n//                 key={page}\r\n//                 onClick={() => getData(page)}\r\n//             >\r\n//                 <Link className=\"page-link\">{page}</Link>\r\n//             </li>\r\n//         );\r\n//     });\r\n//     return (\r\n//         <div id=\"layout-wrapper\">\r\n//             <LayoutHeader />\r\n//             <LayoutSideBar />\r\n//             <div className=\"row\" style={{\r\n//                 paddingTop: '150px',   // Padding for the top\r\n//                 paddingLeft: '50px',\r\n//                 paddingRight: '20px',\r\n//             }}> {/* Add padding to the row */}\r\n//                 <div className=\"col-xl-12\">\r\n//                     <div className=\"card card-height-100\">\r\n//                         <div className=\"card-header align-items-center d-flex\">\r\n//                             <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\r\n\r\n//                             <button\r\n//                                 className=\"btn btn-primary ms-auto\"\r\n//                                 onClick={handleCommunicationPerformed}\r\n//                                 disabled={selectedCompanies.length === 0} // Disable button if no company is selected\r\n//                             >\r\n//                                 Communication Performed\r\n//                             </button>\r\n//                         </div>\r\n\r\n//                         {/* Modal */}\r\n//                         {showModal && (\r\n//                             <div\r\n//                                 style={{\r\n//                                     position: 'fixed',\r\n//                                     top: '50%',\r\n//                                     left: '50%',\r\n//                                     transform: 'translate(-50%, -50%)',\r\n//                                     background: 'white',\r\n//                                     border: '1px solid #ccc',\r\n//                                     borderRadius: '8px',\r\n//                                     width: '400px',\r\n//                                     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n//                                     zIndex: 1000,\r\n//                                     padding: '20px',\r\n//                                 }}\r\n//                             >\r\n//                                 <div>\r\n//                                     <h5>Communication Performed</h5>\r\n//                                     <hr />\r\n//                                 </div>\r\n//                                 <div style={{ marginBottom: '20px' }}>\r\n//                                     {/* Communication Select */}\r\n//                                     <div style={{ marginBottom: \"10px\" }}>\r\n//                                         <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\r\n//                                             Communication:\r\n//                                         </label>\r\n//                                         <select\r\n//                                             id=\"communicationSelect\"\r\n//                                             style={{\r\n//                                                 width: \"100%\",\r\n//                                                 padding: \"8px\",\r\n//                                                 marginTop: \"5px\",\r\n//                                                 border: \"1px solid #ccc\",\r\n//                                                 borderRadius: \"4px\",\r\n//                                             }}\r\n//                                             value={selectedCommunication}\r\n//                                             onChange={(e) => setSelectedCommunication(e.target.value)}\r\n//                                         >\r\n//                                             <option value=\"\">Select Communication</option>\r\n//                                             {communications.map((comm) => (\r\n//                                                 <option key={comm.communicationId} value={comm.communicationId}>\r\n//                                                     {comm.communicationName}\r\n//                                                 </option>\r\n//                                             ))}\r\n//                                         </select>\r\n//                                         {errors.selectedCommunication && (\r\n//                         <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.selectedCommunication}</span>\r\n//                     )}\r\n//                                     </div>\r\n\r\n//                                     {/* Flatpickr for Date */}\r\n//                                     <div style={{ marginBottom: '10px' }}>\r\n//                                         <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\r\n//                                         <Flatpickr\r\n//                                             id=\"updatedDate\"\r\n//                                             value={selectedDate}\r\n//                                             onChange={(date) => setSelectedDate(date)}\r\n//                                             options={{ dateFormat: 'Y-m-d' }}\r\n//                                             style={{\r\n//                                                 width: '100%',\r\n//                                                 padding: '8px',\r\n//                                                 marginTop: '5px',\r\n//                                                 border: '1px solid #ccc',\r\n//                                                 borderRadius: '4px',\r\n//                                             }}\r\n//                                         />\r\n//                                         {errors.selectedDate && (\r\n//                         <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.selectedDate}</span>\r\n//                     )}\r\n//                                     </div>\r\n\r\n//                                     {/* Notes Textarea */}\r\n//                                     <div>\r\n//                                         <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\r\n//                                         <textarea\r\n//                                             id=\"notes\"\r\n//                                             value={notes}\r\n//                                             onChange={(e) => setNotes(e.target.value)}\r\n//                                             rows=\"4\"\r\n//                                             style={{\r\n//                                                 width: '100%',\r\n//                                                 padding: '8px',\r\n//                                                 marginTop: '5px',\r\n//                                                 border: '1px solid #ccc',\r\n//                                                 borderRadius: '4px',\r\n//                                             }}\r\n//                                         ></textarea>\r\n//                                         {errors.notes && (\r\n//                         <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.notes}</span>\r\n//                     )}\r\n//                                     </div>\r\n//                                 </div>\r\n\r\n//                                 {/* Footer Buttons */}\r\n//                                 <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n//                                     <button\r\n//                                         style={{\r\n//                                             padding: '8px 16px',\r\n//                                             background: '#ccc',\r\n//                                             border: 'none',\r\n//                                             borderRadius: '4px',\r\n//                                             cursor: 'pointer',\r\n//                                         }}\r\n//                                         onClick={handleCloseModal}\r\n//                                     >\r\n//                                         Cancel\r\n//                                     </button>\r\n//                                     <button\r\n//                                         style={{\r\n//                                             padding: '8px 16px',\r\n//                                             background: '#007bff',\r\n//                                             color: 'white',\r\n//                                             border: 'none',\r\n//                                             borderRadius: '4px',\r\n//                                             cursor: 'pointer',\r\n//                                         }}\r\n//                                         onClick={handleModalSubmit}\r\n//                                     >\r\n//                                         Submit\r\n//                                     </button>\r\n//                                 </div>\r\n//                             </div>\r\n//                         )}\r\n\r\n//                         {/* Table */}\r\n//                         <div className=\"card-body\" style={{ padding: '20px' }}> {/* Add padding to the card-body */}\r\n//                             <div className=\"table-responsive table-card\" style={{ padding: '10px' }}> {/* Add padding here */}\r\n//                                 <table className=\"table align-middle\">\r\n//                                     <thead className=\"table-light\">\r\n//                                         <tr>\r\n//                                             <th>S.No</th>\r\n//                                             <th>Select</th>\r\n//                                             <th>Company Name</th>\r\n//                                             <th>Last Communication</th>\r\n//                                             <th>Next Communication</th>\r\n//                                         </tr>\r\n//                                     </thead>\r\n//                                     <tbody>\r\n//                                         {lists.length > 0 ? (\r\n//                                             lists.map((company, index) => {\r\n//                                                 // Extract communications for the company\r\n//                                                 const lastCommunications = company.communications.filter(\r\n//                                                     (c) => c.status === true\r\n//                                                 );\r\n//                                                 const nextCommunications = company.communications.find(\r\n//                                                     (c) => c.status === false\r\n//                                                 );\r\n\r\n//                                                 return (\r\n//                                                     <tr key={company.companyId}>\r\n//                                                         <td>{index + 1}</td>\r\n//                                                         <td>\r\n//                                                             <input\r\n//                                                                 type=\"checkbox\"\r\n//                                                                 checked={selectedCompanies.includes(company.companyId)}\r\n//                                                                 onChange={() => handleCheckboxChange(company.companyId)}\r\n//                                                             />\r\n//                                                         </td>\r\n//                                                         <td>{company.companyName}</td>\r\n//                                                         <td>\r\n//                                                             {lastCommunications.length > 0 ? (\r\n//                                                                 <>\r\n//                                                                     {lastCommunications.map((communication, idx) => (\r\n//                                                                         <div key={idx}>\r\n//                                                                             {communication.communicationName} -{\" \"}\r\n//                                                                             {moment(communication.scheduledDate).format('DD/MM/YYYY')}\r\n//                                                                         </div>\r\n//                                                                     ))}\r\n//                                                                 </>\r\n//                                                             ) : (\r\n//                                                                 \"No Completed Communications\"\r\n//                                                             )}\r\n//                                                         </td>\r\n//                                                         <td>\r\n//                                                             {nextCommunications ? (\r\n//                                                                 <>\r\n//                                                                     <span\r\n//                                                                         style={{\r\n//                                                                             color: isToday(new Date(nextCommunications.scheduledDate))\r\n//                                                                                 ? \"yellow\"\r\n//                                                                                 : isPast(new Date(nextCommunications.scheduledDate))\r\n//                                                                                     ? \"red\"\r\n//                                                                                     : \"inherit\",\r\n//                                                                             fontWeight: \"bold\",\r\n//                                                                         }}\r\n//                                                                     >\r\n//                                                                         {nextCommunications.communicationName}\r\n//                                                                     </span>{\" \"}\r\n//                                                                     -{\" \"}\r\n//                                                                     {moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')}\r\n//                                                                 </>\r\n//                                                             ) : (\r\n//                                                                 \"No Upcoming Communication\"\r\n//                                                             )}\r\n//                                                         </td>\r\n//                                                     </tr>\r\n//                                                 );\r\n//                                             })\r\n//                                         ) : (\r\n//                                             <tr>\r\n//                                                 <td colSpan=\"6\" className=\"text-center\">\r\n//                                                     No data available\r\n//                                                 </td>\r\n//                                             </tr>\r\n//                                         )}\r\n//                                     </tbody>\r\n//                                 </table>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }    \r\n\r\n\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport config from \"../../Common/Configurations/APIConfig\";\r\nimport { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\r\nimport Flatpickr from \"react-flatpickr\"; // Import Flatpickr\r\nimport \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\r\nimport moment from \"moment\";\r\nimport LayoutHeader from \"../../Common/Layout/Header\";\r\nimport LayoutSideBar from \"../../Common/Layout/Sidebar\";\r\n\r\n\r\nexport default function Dashboard() {\r\n    const [lists, setLists] = useState([]);\r\n    const [recordForEdit, setRecordForEdit] = useState(null);\r\n    const [errors, setErrors] = useState({});\r\n    const [btnSubmit, setBtnSubmit] = useState(true);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [data, setData] = useState([]);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedCommunication, setSelectedCommunication] = useState(\"\");\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [notes, setNotes] = useState(\"\");\r\n    const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\r\n    const [selectedCompanies, setSelectedCompanies] = useState([]);\r\n    const [communications, setCommunications] = useState([]);\r\n\r\n\r\n    const headerConfig = {\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n\r\n\r\n    const [disabledHighlights, setDisabledHighlights] = useState(() => {\r\n        return JSON.parse(localStorage.getItem(\"disabledHighlights\")) || [];\r\n    });\r\n    const handleDisableHighlight = (communicationId) => {\r\n        setDisabledHighlights((prev) => {\r\n            const updated = [...prev, communicationId];\r\n            localStorage.setItem(\"disabledHighlights\", JSON.stringify(updated));\r\n            return updated;\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        const savedHighlights = JSON.parse(localStorage.getItem(\"disabledHighlights\"));\r\n        if (savedHighlights) {\r\n            setDisabledHighlights(savedHighlights);\r\n        }\r\n    }, []);\r\n        \r\n    \r\n    \r\n\r\n    const validate = () => {\r\n        let temp = {};\r\n        temp.selectedCommunication = selectedCommunication ? true : \"Please select a communication.\";\r\n        temp.selectedDate = selectedDate.length > 0 ? true : \"Please select a date.\";\r\n        temp.notes = notes.trim() ? true : \"Notes cannot be empty.\";\r\n    \r\n        setErrors(temp);\r\n        return Object.values(temp).every((x) => x === true);\r\n    };\r\n\r\n    const handleCommunicationPerformed = async () => {\r\n        if (selectedCompanies.length > 0) {\r\n            try {\r\n                // Fetch communications from the API\r\n                const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\r\n\r\n                if (response.data && response.data.statusCode === 200) {\r\n                    // Update communications state with API data\r\n                    setCommunications(response.data.data || []);\r\n                    setShowModal(true); // Open the modal\r\n                } else {\r\n                    handleError(response.data.message || \"Failed to fetch communications.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching communications:\", error);\r\n                handleError(\"An error occurred while fetching communications.\");\r\n            }\r\n        } else {\r\n            alert(\"Please select at least one company!\");\r\n        }\r\n    };\r\n\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        setSelectedCompanies([]);           // Reset selected companies\r\n    setSelectedCommunication(\"\");      // Reset selected communication\r\n    setSelectedDate([]);               // Reset selected date\r\n    setNotes(\"\");                      // Clear notes\r\n    setErrors({});   \r\n    };\r\n    const handleModalSubmit = async () => {\r\n        if (!validate()) return; // If validation fails, stop submission\r\n    \r\n        // Payload to be sent to the backend\r\n        const updateRecord = {\r\n            selectedCompanies, // Assuming this is an array of company IDs\r\n            selectedCommunication, // Communication ID\r\n            selectedDate, // List of dates (could be an array or a single date based on your backend logic)\r\n            notes, // The notes entered in the modal\r\n        };\r\n\r\n        try {\r\n            // Make the PUT request with the provided format\r\n            const response = await axios.put(\r\n                `${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`, // API URL\r\n                updateRecord, // Payload with the data\r\n                headerConfig // Header configuration with Authorization and Content-Type\r\n            );\r\n\r\n            // Handle response\r\n            if (response.data.statusCode === 200) {\r\n                handleSuccess(\"Status updated successfully.\");\r\n                getData(pageNumber);\r\n                // You can add more success logic here (like closing the modal, etc.)\r\n            } else {\r\n                handleError(response.data.message || \"Failed to update status.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error in updating status:\", error);\r\n            handleError(\"An error occurred while updating the status.\");\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = (companyId) => {\r\n        setSelectedCompanies((prevSelectedCompanies) => {\r\n            if (prevSelectedCompanies.includes(companyId)) {\r\n                // Deselect company\r\n                return prevSelectedCompanies.filter((id) => id !== companyId);\r\n            } else {\r\n                // Select company\r\n                return [...prevSelectedCompanies, companyId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Open the modal\r\n\r\n\r\n    const isToday = (date) => {\r\n        const today = new Date();\r\n        return (\r\n            date.getDate() === today.getDate() &&\r\n            date.getMonth() === today.getMonth() &&\r\n            date.getFullYear() === today.getFullYear()\r\n        );\r\n    };\r\n    const isPast = (date) => date < new Date();\r\n\r\n\r\n    const resetForm = () => {\r\n\r\n        setErrors({});\r\n    };\r\n\r\n\r\n\r\n    const getData = (number) => {\r\n        axios\r\n            .get(\r\n                `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\r\n                headerConfig\r\n            )\r\n            .then((response) => {\r\n                setLists(response.data.data);\r\n                setPageNumber(response.data.data.pageNumber);\r\n                setPageSize(response.data.data.pageSize);\r\n                setTotalPages(response.data.data.totalPages);\r\n                setData(response.data.data);\r\n                setTotalRecords(response.data.data.totalRecords);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData(pageNumber);\r\n    }, []);\r\n\r\n    const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\r\n        const page = index + 1;\r\n        return (\r\n            <li\r\n                className=\"page-item\"\r\n                key={page}\r\n                onClick={() => getData(page)}\r\n            >\r\n                <Link className=\"page-link\">{page}</Link>\r\n            </li>\r\n        );\r\n    });\r\n    return (\r\n        <div id=\"layout-wrapper\" style={{ backgroundColor: \"#F08080\" }}>\r\n            <LayoutHeader />\r\n            <LayoutSideBar />\r\n            <div className=\"row\" style={{\r\n                paddingTop: '150px',   // Padding for the top\r\n                paddingLeft: '50px',\r\n                paddingRight: '20px',\r\n            }}> {/* Add padding to the row */}\r\n                <div className=\"col-xl-12\">\r\n                    <div className=\"card card-height-100\">\r\n                        <div className=\"card-header align-items-center d-flex\">\r\n                            <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\r\n\r\n                            <button\r\n                                className=\"btn btn-primary ms-auto\"\r\n                                onClick={handleCommunicationPerformed}\r\n                                disabled={selectedCompanies.length === 0} // Disable button if no company is selected\r\n                            >\r\n                                Communication Performed\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Modal */}\r\n                        {showModal && (\r\n                            <div\r\n                                style={{\r\n                                    position: 'fixed',\r\n                                    top: '50%',\r\n                                    left: '50%',\r\n                                    transform: 'translate(-50%, -50%)',\r\n                                    background: 'white',\r\n                                    border: '1px solid #ccc',\r\n                                    borderRadius: '8px',\r\n                                    width: '400px',\r\n                                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n                                    zIndex: 1000,\r\n                                    padding: '20px',\r\n                                }}\r\n                            >\r\n                                <div>\r\n                                    <h5>Communication Performed</h5>\r\n                                    <hr />\r\n                                </div>\r\n                                <div style={{ marginBottom: '20px' }}>\r\n                                    {/* Communication Select */}\r\n                                    <div style={{ marginBottom: \"10px\" }}>\r\n                                        <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\r\n                                            Communication:\r\n                                        </label>\r\n                                        <select\r\n                                            id=\"communicationSelect\"\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                                padding: \"8px\",\r\n                                                marginTop: \"5px\",\r\n                                                border: \"1px solid #ccc\",\r\n                                                borderRadius: \"4px\",\r\n                                            }}\r\n                                            value={selectedCommunication}\r\n                                            onChange={(e) => setSelectedCommunication(e.target.value)}\r\n                                        >\r\n                                            <option value=\"\">Select Communication</option>\r\n                                            {communications.map((comm) => (\r\n                                                <option key={comm.communicationId} value={comm.communicationId}>\r\n                                                    {comm.communicationName}\r\n                                                </option>\r\n                                            ))}\r\n                                        </select>\r\n                                        {errors.selectedCommunication && (\r\n                        <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.selectedCommunication}</span>\r\n                    )}\r\n                                    </div>\r\n\r\n                                    {/* Flatpickr for Date */}\r\n                                    <div style={{ marginBottom: '10px' }}>\r\n                                        <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\r\n                                        <Flatpickr\r\n                                            id=\"updatedDate\"\r\n                                            value={selectedDate}\r\n                                            onChange={(date) => setSelectedDate(date)}\r\n                                            options={{ dateFormat: 'Y-m-d' }}\r\n                                            style={{\r\n                                                width: '100%',\r\n                                                padding: '8px',\r\n                                                marginTop: '5px',\r\n                                                border: '1px solid #ccc',\r\n                                                borderRadius: '4px',\r\n                                            }}\r\n                                        />\r\n                                        {errors.selectedDate && (\r\n                        <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.selectedDate}</span>\r\n                    )}\r\n                                    </div>\r\n\r\n                                    {/* Notes Textarea */}\r\n                                    <div>\r\n                                        <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\r\n                                        <textarea\r\n                                            id=\"notes\"\r\n                                            value={notes}\r\n                                            onChange={(e) => setNotes(e.target.value)}\r\n                                            rows=\"4\"\r\n                                            style={{\r\n                                                width: '100%',\r\n                                                padding: '8px',\r\n                                                marginTop: '5px',\r\n                                                border: '1px solid #ccc',\r\n                                                borderRadius: '4px',\r\n                                            }}\r\n                                        ></textarea>\r\n                                        {errors.notes && (\r\n                        <span style={{ color: \"red\", fontSize: \"12px\" }}>{errors.notes}</span>\r\n                    )}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Footer Buttons */}\r\n                                <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n                                    <button\r\n                                        style={{\r\n                                            padding: '8px 16px',\r\n                                            background: '#ccc',\r\n                                            border: 'none',\r\n                                            borderRadius: '4px',\r\n                                            cursor: 'pointer',\r\n                                        }}\r\n                                        onClick={handleCloseModal}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button\r\n                                        style={{\r\n                                            padding: '8px 16px',\r\n                                            background: '#007bff',\r\n                                            color: 'white',\r\n                                            border: 'none',\r\n                                            borderRadius: '4px',\r\n                                            cursor: 'pointer',\r\n                                        }}\r\n                                        onClick={handleModalSubmit}\r\n                                    >\r\n                                        Submit\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Table */}\r\n                        <div className=\"card-body\" style={{ padding: '20px' }}> {/* Add padding to the card-body */}\r\n                            <div className=\"table-responsive table-card\" style={{ padding: '10px' }}> {/* Add padding here */}\r\n                                <table className=\"table align-middle\">\r\n                                    <thead className=\"table-light\">\r\n                                        <tr>\r\n                                            <th>S.No</th>\r\n                                            <th>Select</th>\r\n                                            <th>Company Name</th>\r\n                                            <th>Last Communication</th>\r\n                                            <th>Next Communication</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {lists.length > 0 ? (\r\n                                            lists.map((company, index) => {\r\n                                                // Extract communications for the company\r\n                                                const lastCommunications = company.communications.filter(\r\n                                                    (c) => c.status === true\r\n                                                );\r\n                                                const nextCommunications = company.communications.find(\r\n                                                    (c) => c.status === false\r\n                                                );\r\n\r\n                                                return (\r\n                                                    <tr key={company.companyId}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                checked={selectedCompanies.includes(company.companyId)}\r\n                                                                onChange={() => handleCheckboxChange(company.companyId)}\r\n                                                            />\r\n                                                        </td>\r\n                                                        <td>{company.companyName}</td>\r\n                                                        <td>\r\n                                                            {lastCommunications.length > 0 ? (\r\n                                                                <>\r\n                                                                    {lastCommunications.map((communication, idx) => (\r\n                                                                        <div key={idx}>\r\n                                                                            {communication.communicationName} -{\" \"}\r\n                                                                            {moment(communication.scheduledDate).format('DD/MM/YYYY')}\r\n                                                                        </div>\r\n                                                                    ))}\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                \"No Completed Communications\"\r\n                                                            )}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {nextCommunications ? (\r\n                                                                <>\r\n                             <td>\r\n    {nextCommunications ? (\r\n        <>\r\n            <span\r\n                style={{\r\n                    color: disabledHighlights.includes(nextCommunications.communicationId)\r\n                        ? \"inherit\"\r\n                        : isToday(new Date(nextCommunications.scheduledDate))\r\n                        ? \"yellow\"\r\n                        : isPast(new Date(nextCommunications.scheduledDate))\r\n                        ? \"red\"\r\n                        : \"inherit\",\r\n                    fontWeight: \"bold\",\r\n                }}\r\n            >\r\n                {nextCommunications.communicationName}\r\n            </span>{\" \"}\r\n            -{\" \"}\r\n            {moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')}\r\n            <br />\r\n            <span\r\n                style={{\r\n                    color: \"blue\",\r\n                    textDecoration: \"underline\",\r\n                    cursor: \"pointer\",\r\n                }}\r\n                onClick={() => handleDisableHighlight(nextCommunications.communicationId)}\r\n            >\r\n                Disable Highlight\r\n            </span>\r\n        </>\r\n    ) : (\r\n        \"No Upcoming Communication\"\r\n    )}\r\n</td>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                \"No Upcoming Communication\"\r\n                                                            )}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })\r\n                                        ) : (\r\n                                            <tr>\r\n                                                <td colSpan=\"6\" className=\"text-center\">\r\n                                                    No data available\r\n                                                </td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\n\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,uCAAuC;AAC1D,SAASC,aAAa,EAAEC,WAAW,QAAQ,kCAAkC;AAC7E,OAAOC,SAAS,MAAM,iBAAiB,CAAC,CAAC;AACzC,OAAO,yCAAyC,CAAC,CAAC;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,aAAa,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGxD,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}