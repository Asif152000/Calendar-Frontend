{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md Asif\\\\Desktop\\\\CALENDAR FRONTEND\\\\src\\\\Components\\\\UserModule\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import config from \"../../Common/Configurations/APIConfig\";\n// import { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\n// import Flatpickr from \"react-flatpickr\"; // Import Flatpickr\n// import \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\n// import moment from \"moment\";\n\n// export default function Dashboard() {\n//     const [lists, setLists] = useState([]);\n//     const [recordForEdit, setRecordForEdit] = useState(null);\n//     const [errors, setErrors] = useState({});\n//     const [btnSubmit, setBtnSubmit] = useState(true);\n//     const [totalPages, setTotalPages] = useState(0);\n//     const [pageSize, setPageSize] = useState(20);\n//     const [pageNumber, setPageNumber] = useState(1);\n//     const [data, setData] = useState([]);\n//     const [totalRecords, setTotalRecords] = useState(0);\n//     const [showModal, setShowModal] = useState(false);\n//     const [selectedCommunication, setSelectedCommunication] = useState(\"\");\n//     const [selectedDate, setSelectedDate] = useState(new Date());\n//     const [notes, setNotes] = useState(\"\");\n//     const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\n//     const [selectedCompanies, setSelectedCompanies] = useState([]);\n//     const [communications, setCommunications] = useState([]);\n\n//     const headerConfig = {\n//         headers: {\n//             Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\n//             \"Content-Type\": \"application/json\",\n//         },\n//     };\n\n//     const validate = () => {\n//         let temp = {};\n\n//         setErrors(temp);\n//         return Object.values(temp).every((x) => x === true);\n//     };\n\n//     const handleCommunicationPerformed = async () => {\n//         if (selectedCompanies.length > 0) {\n//             try {\n//                 // Fetch communications from the API\n//                 const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\n\n//                 if (response.data && response.data.statusCode === 200) {\n//                     // Update communications state with API data\n//                     setCommunications(response.data.data || []);\n//                     setShowModal(true); // Open the modal\n//                 } else {\n//                     handleError(response.data.message || \"Failed to fetch communications.\");\n//                 }\n//             } catch (error) {\n//                 console.error(\"Error fetching communications:\", error);\n//                 handleError(\"An error occurred while fetching communications.\");\n//             }\n//         } else {\n//             alert(\"Please select at least one company!\");\n//         }\n//     };\n\n//     const handleCloseModal = () => {\n//         setShowModal(false);\n//         setSelectedCompanies([]);  // Reset selected companies when closing modal\n//     };\n//     const handleModalSubmit = async () => {\n//         // Payload to be sent to the backend\n//         const updateRecord = {\n//           selectedCompanies, // Assuming this is an array of company IDs\n//           selectedCommunication, // Communication ID\n//           selectedDate, // List of dates (could be an array or a single date based on your backend logic)\n//           notes, // The notes entered in the modal\n//         };\n\n//         try {\n//           // Make the PUT request with the provided format\n//           const response = await axios.put(\n//             `${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`, // API URL\n//             updateRecord, // Payload with the data\n//             headerConfig // Header configuration with Authorization and Content-Type\n//           );\n\n//           // Handle response\n//           if (response.data.statusCode === 200) {\n//             handleSuccess(\"Status updated successfully.\");\n//             // You can add more success logic here (like closing the modal, etc.)\n//           } else {\n//             handleError(response.data.message || \"Failed to update status.\");\n//           }\n//         } catch (error) {\n//           console.error(\"Error in updating status:\", error);\n//           handleError(\"An error occurred while updating the status.\");\n//         }\n//       };\n\n//     const handleCheckboxChange = (companyId) => {\n//         setSelectedCompanies((prevSelectedCompanies) => {\n//             if (prevSelectedCompanies.includes(companyId)) {\n//                 // Deselect company\n//                 return prevSelectedCompanies.filter((id) => id !== companyId);\n//             } else {\n//                 // Select company\n//                 return [...prevSelectedCompanies, companyId];\n//             }\n//         });\n//     };\n\n//     // Open the modal\n\n//     const isToday = (date) => {\n//         const today = new Date();\n//         return (\n//             date.getDate() === today.getDate() &&\n//             date.getMonth() === today.getMonth() &&\n//             date.getFullYear() === today.getFullYear()\n//         );\n//     };\n//     const isPast = (date) => date < new Date();\n\n//     const resetForm = () => {\n\n//         setErrors({});\n//     };\n\n//     const getData = (number) => {\n//         axios\n//             .get(\n//                 `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\n//                 headerConfig\n//             )\n//             .then((response) => {\n//                 setLists(response.data.data);\n//                 setPageNumber(response.data.data.pageNumber);\n//                 setPageSize(response.data.data.pageSize);\n//                 setTotalPages(response.data.data.totalPages);\n//                 setData(response.data.data);\n//                 setTotalRecords(response.data.data.totalRecords);\n//             });\n//     };\n\n//     useEffect(() => {\n//         getData(pageNumber);\n//     }, []);\n\n//     const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\n//         const page = index + 1;\n//         return (\n//             <li\n//                 className=\"page-item\"\n//                 key={page}\n//                 onClick={() => getData(page)}\n//             >\n//                 <Link className=\"page-link\">{page}</Link>\n//             </li>\n//         );\n//     });\n\n//     return (\n//         <div className=\"row\">\n//             <div className=\"col-xl-12\">\n//                 <div className=\"card card-height-100\">\n//                     <div className=\"card-header align-items-center d-flex\">\n//                         <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\n\n//                         <button\n//                             className=\"btn btn-primary ms-auto\"\n//                             onClick={handleCommunicationPerformed}\n//                             disabled={selectedCompanies.length === 0} // Disable button if no company is selected\n//                         >\n//                             Communication Performed\n//                         </button>\n\n//                     </div>\n//                     {/* Modal */}\n//                     {showModal && (\n//                         <div\n//                             style={{\n//                                 position: 'fixed',\n//                                 top: '50%',\n//                                 left: '50%',\n//                                 transform: 'translate(-50%, -50%)',\n//                                 background: 'white',\n//                                 border: '1px solid #ccc',\n//                                 borderRadius: '8px',\n//                                 width: '400px',\n//                                 boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n//                                 zIndex: 1000,\n//                                 padding: '20px',\n//                             }}\n//                         >\n//                             <div>\n//                                 <h5>Communication Performed</h5>\n//                                 <hr />\n//                             </div>\n//                             <div style={{ marginBottom: '20px' }}>\n//                                 <div style={{ marginBottom: \"10px\" }}>\n//     <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\n//         Communication:\n//     </label>\n//     <select\n//         id=\"communicationSelect\"\n//         style={{\n//             width: \"100%\",\n//             padding: \"8px\",\n//             marginTop: \"5px\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//         }}\n//         value={selectedCommunication}\n//         onChange={(e) => setSelectedCommunication(e.target.value)}\n//     >\n//         <option value=\"\">Select Communication</option>\n//         {communications.map((comm) => (\n//             <option key={comm.communicationId} value={comm.communicationId}>\n//                 {comm.communicationName}\n//             </option>\n//         ))}\n//     </select>\n// </div>\n\n//                                 {/* Flatpickr for Date */}\n//                                 <div style={{ marginBottom: '10px' }}>\n//                                     <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\n//                                     <Flatpickr\n//                                         id=\"updatedDate\"\n//                                         value={selectedDate}\n//                                         onChange={(date) => setSelectedDate(date)}\n//                                         options={{ dateFormat: 'Y-m-d' }}\n//                                         style={{\n//                                             width: '100%',\n//                                             padding: '8px',\n//                                             marginTop: '5px',\n//                                             border: '1px solid #ccc',\n//                                             borderRadius: '4px',\n//                                         }}\n//                                     />\n//                                 </div>\n//                                 {/* Notes Textarea */}\n//                                 <div>\n//                                     <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\n//                                     <textarea\n//                                         id=\"notes\"\n//                                         value={notes}\n//                                         onChange={(e) => setNotes(e.target.value)}\n//                                         rows=\"4\"\n//                                         style={{\n//                                             width: '100%',\n//                                             padding: '8px',\n//                                             marginTop: '5px',\n//                                             border: '1px solid #ccc',\n//                                             borderRadius: '4px',\n//                                         }}\n//                                     ></textarea>\n//                                 </div>\n//                             </div>\n//                             {/* Footer Buttons */}\n//                             <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\n//                                 <button\n//                                     style={{\n//                                         padding: '8px 16px',\n//                                         background: '#ccc',\n//                                         border: 'none',\n//                                         borderRadius: '4px',\n//                                         cursor: 'pointer',\n//                                     }}\n//                                     onClick={handleCloseModal}\n//                                 >\n//                                     Cancel\n//                                 </button>\n//                                 <button\n//                                     style={{\n//                                         padding: '8px 16px',\n//                                         background: '#007bff',\n//                                         color: 'white',\n//                                         border: 'none',\n//                                         borderRadius: '4px',\n//                                         cursor: 'pointer',\n//                                     }}\n//                                     onClick={handleModalSubmit}\n//                                 >\n//                                     Submit\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     )}\n//                     <div className=\"card-body\">\n//                         <div className=\"table-responsive table-card\">\n//                             <table className=\"table align-middle\">\n//                                 <thead className=\"table-light\">\n//                                     <tr>\n//                                         <th>S.No</th>\n//                                         <th>Select</th>\n//                                         <th>Company Name</th>\n//                                         <th>Last Communication</th>\n//                                         <th>Next Communication</th>\n//                                     </tr>\n//                                 </thead>\n//                                 <tbody>\n//                                     {lists.length > 0 ? (\n//                                         lists.map((company, index) => {\n//                                             // Extract communications for the company\n//                                             const lastCommunications = company.communications.filter(\n//                                                 (c) => c.status === true\n//                                             );\n//                                             const nextCommunications = company.communications.find(\n//                                                 (c) => c.status === false\n//                                             );\n\n//                                             return (\n//                                                 <tr key={company.companyId}>\n//                                                     <td>{index + 1}</td>\n//                                                     <td>\n//                                                         <input\n//                                                             type=\"checkbox\"\n//                                                             checked={selectedCompanies.includes(company.companyId)}\n//                                                             onChange={() => handleCheckboxChange(company.companyId)}\n//                                                         />\n//                                                     </td>\n//                                                     <td>{company.companyName}</td>\n//                                                     <td>\n//                                                         {lastCommunications.length > 0 ? (\n//                                                             <>\n//                                                                 {lastCommunications.map((communication, idx) => (\n//                                                                     <div key={idx}>\n//                                                                         {communication.communicationName} -{\" \"}\n//                                                                         {moment(communication.scheduledDate).format('DD/MM/YYYY')} {/* Format date */}\n//                                                                     </div>\n//                                                                 ))}\n//                                                             </>\n//                                                         ) : (\n//                                                             \"No Completed Communications\"\n//                                                         )}\n//                                                     </td>\n//                                                     <td>\n//                                                         {nextCommunications ? (\n//                                                             <>\n//                                                                 <span\n//                                                                     style={{\n//                                                                         color: isToday(new Date(nextCommunications.scheduledDate))\n//                                                                             ? \"yellow\"\n//                                                                             : isPast(new Date(nextCommunications.scheduledDate))\n//                                                                                 ? \"red\"\n//                                                                                 : \"inherit\",\n//                                                                         fontWeight: \"bold\", // Make the text bold\n//                                                                     }}\n//                                                                 >\n//                                                                     {nextCommunications.communicationName}\n//                                                                 </span>{\" \"}\n//                                                                 -{\" \"}\n//                                                                 {moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')} {/* Format date */}\n//                                                                 <br />\n//                                                                 <button className=\"btn btn-link text-danger\">\n//                                                                     Disable Highlight\n//                                                                 </button>\n//                                                             </>\n//                                                         ) : (\n//                                                             \"No Upcoming Communication\"\n//                                                         )}\n//                                                     </td>\n//                                                 </tr>\n//                                             );\n//                                         })\n//                                     ) : (\n//                                         <tr>\n//                                             <td colSpan=\"6\" className=\"text-center\">\n//                                                 No data available\n//                                             </td>\n//                                         </tr>\n//                                     )}\n//                                 </tbody>\n//                             </table>\n//                         </div>\n//                         <div className=\"align-items-center mt-4 pt-2 justify-content-between d-flex\">\n//                             <div className=\"flex-shrink-0\">\n//                                 <div className=\"text-muted\">\n//                                     Showing{\" \"}\n//                                     <span className=\"fw-semibold\">{lists.length}</span> of{\" \"}\n//                                     <span className=\"fw-semibold\">{totalRecords}</span>{\" \"}\n//                                     Results\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport config from \"../../Common/Configurations/APIConfig\";\nimport { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\nimport Flatpickr from \"react-flatpickr\"; // Import Flatpickr\nimport \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [lists, setLists] = useState([]);\n  const [recordForEdit, setRecordForEdit] = useState(null);\n  const [errors, setErrors] = useState({});\n  const [btnSubmit, setBtnSubmit] = useState(true);\n  const [totalPages, setTotalPages] = useState(0);\n  const [pageSize, setPageSize] = useState(20);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [data, setData] = useState([]);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedCommunication, setSelectedCommunication] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [notes, setNotes] = useState(\"\");\n  const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\n  const [selectedCompanies, setSelectedCompanies] = useState([]);\n  const [communications, setCommunications] = useState([]);\n  const headerConfig = {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const validate = () => {\n    let temp = {};\n    setErrors(temp);\n    return Object.values(temp).every(x => x === true);\n  };\n  const handleCommunicationPerformed = async () => {\n    if (selectedCompanies.length > 0) {\n      try {\n        // Fetch communications from the API\n        const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\n        if (response.data && response.data.statusCode === 200) {\n          // Update communications state with API data\n          setCommunications(response.data.data || []);\n          setShowModal(true); // Open the modal\n        } else {\n          handleError(response.data.message || \"Failed to fetch communications.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching communications:\", error);\n        handleError(\"An error occurred while fetching communications.\");\n      }\n    } else {\n      alert(\"Please select at least one company!\");\n    }\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedCompanies([]); // Reset selected companies when closing modal\n  };\n  const handleModalSubmit = async () => {\n    // Payload to be sent to the backend\n    const updateRecord = {\n      selectedCompanies,\n      // Assuming this is an array of company IDs\n      selectedCommunication,\n      // Communication ID\n      selectedDate,\n      // List of dates (could be an array or a single date based on your backend logic)\n      notes // The notes entered in the modal\n    };\n    try {\n      // Make the PUT request with the provided format\n      const response = await axios.put(`${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`,\n      // API URL\n      updateRecord,\n      // Payload with the data\n      headerConfig // Header configuration with Authorization and Content-Type\n      );\n\n      // Handle response\n      if (response.data.statusCode === 200) {\n        handleSuccess(\"Status updated successfully.\");\n        // You can add more success logic here (like closing the modal, etc.)\n      } else {\n        handleError(response.data.message || \"Failed to update status.\");\n      }\n    } catch (error) {\n      console.error(\"Error in updating status:\", error);\n      handleError(\"An error occurred while updating the status.\");\n    }\n  };\n  const handleCheckboxChange = companyId => {\n    setSelectedCompanies(prevSelectedCompanies => {\n      if (prevSelectedCompanies.includes(companyId)) {\n        // Deselect company\n        return prevSelectedCompanies.filter(id => id !== companyId);\n      } else {\n        // Select company\n        return [...prevSelectedCompanies, companyId];\n      }\n    });\n  };\n\n  // Open the modal\n\n  const isToday = date => {\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  };\n  const isPast = date => date < new Date();\n  const resetForm = () => {\n    setErrors({});\n  };\n  const getData = number => {\n    axios.get(`${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`, headerConfig).then(response => {\n      setLists(response.data.data);\n      setPageNumber(response.data.data.pageNumber);\n      setPageSize(response.data.data.pageSize);\n      setTotalPages(response.data.data.totalPages);\n      setData(response.data.data);\n      setTotalRecords(response.data.data.totalRecords);\n    });\n  };\n  useEffect(() => {\n    getData(pageNumber);\n  }, []);\n  const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\n    const page = index + 1;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"page-item\",\n      onClick: () => getData(page),\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        className: \"page-link\",\n        children: page\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 17\n      }, this)\n    }, page, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    style: {\n      padding: '40px'\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-xl-12\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-height-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header align-items-center d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"card-title mb-0 flex-grow-1\",\n            children: \"Communications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary ms-auto\",\n            onClick: handleCommunicationPerformed,\n            disabled: selectedCompanies.length === 0 // Disable button if no company is selected\n            ,\n            children: \"Communication Performed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'fixed',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            background: 'white',\n            border: '1px solid #ccc',\n            borderRadius: '8px',\n            width: '400px',\n            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n            zIndex: 1000,\n            padding: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Communication Performed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"communicationSelect\",\n                style: {\n                  fontWeight: \"bold\"\n                },\n                children: \"Communication:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"communicationSelect\",\n                style: {\n                  width: \"100%\",\n                  padding: \"8px\",\n                  marginTop: \"5px\",\n                  border: \"1px solid #ccc\",\n                  borderRadius: \"4px\"\n                },\n                value: selectedCommunication,\n                onChange: e => setSelectedCommunication(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Communication\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 41\n                }, this), communications.map(comm => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: comm.communicationId,\n                  children: comm.communicationName\n                }, comm.communicationId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 638,\n                  columnNumber: 45\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"updatedDate\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Updated Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Flatpickr, {\n                id: \"updatedDate\",\n                value: selectedDate,\n                onChange: date => setSelectedDate(date),\n                options: {\n                  dateFormat: 'Y-m-d'\n                },\n                style: {\n                  width: '100%',\n                  padding: '8px',\n                  marginTop: '5px',\n                  border: '1px solid #ccc',\n                  borderRadius: '4px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"notes\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Add Notes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"notes\",\n                value: notes,\n                onChange: e => setNotes(e.target.value),\n                rows: \"4\",\n                style: {\n                  width: '100%',\n                  padding: '8px',\n                  marginTop: '5px',\n                  border: '1px solid #ccc',\n                  borderRadius: '4px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '8px 16px',\n                background: '#ccc',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              onClick: handleCloseModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                padding: '8px 16px',\n                background: '#007bff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              onClick: handleModalSubmit,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          style: {\n            padding: '20px'\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive table-card\",\n            style: {\n              padding: '10px'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table align-middle\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"table-light\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"S.No\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 719,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Select\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 720,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Company Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 721,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Last Communication\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 722,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Next Communication\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 723,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 718,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 717,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: lists.length > 0 ? lists.map((company, index) => {\n                  // Extract communications for the company\n                  const lastCommunications = company.communications.filter(c => c.status === true);\n                  const nextCommunications = company.communications.find(c => c.status === false);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: index + 1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 739,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"checkbox\",\n                        checked: selectedCompanies.includes(company.companyId),\n                        onChange: () => handleCheckboxChange(company.companyId)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 741,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 740,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: company.companyName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 747,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: lastCommunications.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: lastCommunications.map((communication, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [communication.communicationName, \" -\", \" \", moment(communication.scheduledDate).format('DD/MM/YYYY')]\n                        }, idx, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 752,\n                          columnNumber: 69\n                        }, this))\n                      }, void 0, false) : \"No Completed Communications\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 748,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: nextCommunications ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          style: {\n                            color: isToday(new Date(nextCommunications.scheduledDate)) ? \"yellow\" : isPast(new Date(nextCommunications.scheduledDate)) ? \"red\" : \"inherit\",\n                            fontWeight: \"bold\"\n                          },\n                          children: nextCommunications.communicationName\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 765,\n                          columnNumber: 65\n                        }, this), \" \", \"-\", \" \", moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')]\n                      }, void 0, true) : \"No Upcoming Communication\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 762,\n                      columnNumber: 53\n                    }, this)]\n                  }, company.companyId, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 738,\n                    columnNumber: 49\n                  }, this);\n                }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"6\",\n                    className: \"text-center\",\n                    children: \"No data available\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 789,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 582,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"rh5OZetJgqXdsLLDW+/qUa0+2U4=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Link","useState","useEffect","axios","config","handleSuccess","handleError","Flatpickr","moment","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","lists","setLists","recordForEdit","setRecordForEdit","errors","setErrors","btnSubmit","setBtnSubmit","totalPages","setTotalPages","pageSize","setPageSize","pageNumber","setPageNumber","data","setData","totalRecords","setTotalRecords","showModal","setShowModal","selectedCommunication","setSelectedCommunication","selectedDate","setSelectedDate","Date","notes","setNotes","selectedCompany","setSelectedCompany","selectedCompanies","setSelectedCompanies","communications","setCommunications","headerConfig","headers","Authorization","localStorage","getItem","validate","temp","Object","values","every","x","handleCommunicationPerformed","length","response","get","APIACTIVATEURL","GETALLCOMMUNICATIONMANAGEMENT","statusCode","message","error","console","alert","handleCloseModal","handleModalSubmit","updateRecord","put","UPDATECOMMUNICATION","handleCheckboxChange","companyId","prevSelectedCompanies","includes","filter","id","isToday","date","today","getDate","getMonth","getFullYear","isPast","resetForm","getData","number","GETCOMMUNICATION","then","renderPageNumbers","Array","map","_","index","page","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","disabled","position","top","left","transform","background","border","borderRadius","width","boxShadow","zIndex","marginBottom","htmlFor","fontWeight","marginTop","value","onChange","e","target","comm","communicationId","communicationName","options","dateFormat","rows","display","justifyContent","gap","cursor","color","company","lastCommunications","c","status","nextCommunications","find","type","checked","companyName","communication","idx","scheduledDate","format","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/Md Asif/Desktop/CALENDAR FRONTEND/src/Components/UserModule/Dashboard.js"],"sourcesContent":["\r\n\r\n// import { Link } from \"react-router-dom\";\r\n// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import config from \"../../Common/Configurations/APIConfig\";\r\n// import { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\r\n// import Flatpickr from \"react-flatpickr\"; // Import Flatpickr\r\n// import \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\r\n// import moment from \"moment\";\r\n\r\n\r\n// export default function Dashboard() {\r\n//     const [lists, setLists] = useState([]);\r\n//     const [recordForEdit, setRecordForEdit] = useState(null);\r\n//     const [errors, setErrors] = useState({});\r\n//     const [btnSubmit, setBtnSubmit] = useState(true);\r\n//     const [totalPages, setTotalPages] = useState(0);\r\n//     const [pageSize, setPageSize] = useState(20);\r\n//     const [pageNumber, setPageNumber] = useState(1);\r\n//     const [data, setData] = useState([]);\r\n//     const [totalRecords, setTotalRecords] = useState(0);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [selectedCommunication, setSelectedCommunication] = useState(\"\");\r\n//     const [selectedDate, setSelectedDate] = useState(new Date());\r\n//     const [notes, setNotes] = useState(\"\");\r\n//     const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\r\n//     const [selectedCompanies, setSelectedCompanies] = useState([]);\r\n//     const [communications, setCommunications] = useState([]);\r\n\r\n\r\n//     const headerConfig = {\r\n//         headers: {\r\n//             Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\r\n//             \"Content-Type\": \"application/json\",\r\n//         },\r\n//     };\r\n\r\n    \r\n\r\n   \r\n\r\n//     const validate = () => {\r\n//         let temp = {};\r\n      \r\n//         setErrors(temp);\r\n//         return Object.values(temp).every((x) => x === true);\r\n//     };\r\n\r\n    \r\n//     const handleCommunicationPerformed = async () => {\r\n//         if (selectedCompanies.length > 0) {\r\n//             try {\r\n//                 // Fetch communications from the API\r\n//                 const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\r\n    \r\n//                 if (response.data && response.data.statusCode === 200) {\r\n//                     // Update communications state with API data\r\n//                     setCommunications(response.data.data || []);\r\n//                     setShowModal(true); // Open the modal\r\n//                 } else {\r\n//                     handleError(response.data.message || \"Failed to fetch communications.\");\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error(\"Error fetching communications:\", error);\r\n//                 handleError(\"An error occurred while fetching communications.\");\r\n//             }\r\n//         } else {\r\n//             alert(\"Please select at least one company!\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleCloseModal = () => {\r\n//         setShowModal(false);\r\n//         setSelectedCompanies([]);  // Reset selected companies when closing modal\r\n//     };\r\n//     const handleModalSubmit = async () => {\r\n//         // Payload to be sent to the backend\r\n//         const updateRecord = {\r\n//           selectedCompanies, // Assuming this is an array of company IDs\r\n//           selectedCommunication, // Communication ID\r\n//           selectedDate, // List of dates (could be an array or a single date based on your backend logic)\r\n//           notes, // The notes entered in the modal\r\n//         };\r\n      \r\n//         try {\r\n//           // Make the PUT request with the provided format\r\n//           const response = await axios.put(\r\n//             `${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`, // API URL\r\n//             updateRecord, // Payload with the data\r\n//             headerConfig // Header configuration with Authorization and Content-Type\r\n//           );\r\n      \r\n//           // Handle response\r\n//           if (response.data.statusCode === 200) {\r\n//             handleSuccess(\"Status updated successfully.\");\r\n//             // You can add more success logic here (like closing the modal, etc.)\r\n//           } else {\r\n//             handleError(response.data.message || \"Failed to update status.\");\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error in updating status:\", error);\r\n//           handleError(\"An error occurred while updating the status.\");\r\n//         }\r\n//       };\r\n\r\n//     const handleCheckboxChange = (companyId) => {\r\n//         setSelectedCompanies((prevSelectedCompanies) => {\r\n//             if (prevSelectedCompanies.includes(companyId)) {\r\n//                 // Deselect company\r\n//                 return prevSelectedCompanies.filter((id) => id !== companyId);\r\n//             } else {\r\n//                 // Select company\r\n//                 return [...prevSelectedCompanies, companyId];\r\n//             }\r\n//         });\r\n//     };\r\n\r\n//     // Open the modal\r\n\r\n\r\n//     const isToday = (date) => {\r\n//         const today = new Date();\r\n//         return (\r\n//             date.getDate() === today.getDate() &&\r\n//             date.getMonth() === today.getMonth() &&\r\n//             date.getFullYear() === today.getFullYear()\r\n//         );\r\n//     };\r\n//     const isPast = (date) => date < new Date();\r\n\r\n\r\n//     const resetForm = () => {\r\n       \r\n//         setErrors({});\r\n//     };\r\n\r\n    \r\n\r\n//     const getData = (number) => {\r\n//         axios\r\n//             .get(\r\n//                 `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\r\n//                 headerConfig\r\n//             )\r\n//             .then((response) => {\r\n//                 setLists(response.data.data);\r\n//                 setPageNumber(response.data.data.pageNumber);\r\n//                 setPageSize(response.data.data.pageSize);\r\n//                 setTotalPages(response.data.data.totalPages);\r\n//                 setData(response.data.data);\r\n//                 setTotalRecords(response.data.data.totalRecords);\r\n//             });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         getData(pageNumber);\r\n//     }, []);\r\n\r\n//     const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\r\n//         const page = index + 1;\r\n//         return (\r\n//             <li\r\n//                 className=\"page-item\"\r\n//                 key={page}\r\n//                 onClick={() => getData(page)}\r\n//             >\r\n//                 <Link className=\"page-link\">{page}</Link>\r\n//             </li>\r\n//         );\r\n//     });\r\n\r\n//     return (\r\n//         <div className=\"row\">\r\n//             <div className=\"col-xl-12\">\r\n//                 <div className=\"card card-height-100\">\r\n//                     <div className=\"card-header align-items-center d-flex\">\r\n//                         <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\r\n\r\n//                         <button\r\n//                             className=\"btn btn-primary ms-auto\"\r\n//                             onClick={handleCommunicationPerformed}\r\n//                             disabled={selectedCompanies.length === 0} // Disable button if no company is selected\r\n//                         >\r\n//                             Communication Performed\r\n//                         </button>\r\n\r\n//                     </div>\r\n//                     {/* Modal */}\r\n//                     {showModal && (\r\n//                         <div\r\n//                             style={{\r\n//                                 position: 'fixed',\r\n//                                 top: '50%',\r\n//                                 left: '50%',\r\n//                                 transform: 'translate(-50%, -50%)',\r\n//                                 background: 'white',\r\n//                                 border: '1px solid #ccc',\r\n//                                 borderRadius: '8px',\r\n//                                 width: '400px',\r\n//                                 boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n//                                 zIndex: 1000,\r\n//                                 padding: '20px',\r\n//                             }}\r\n//                         >\r\n//                             <div>\r\n//                                 <h5>Communication Performed</h5>\r\n//                                 <hr />\r\n//                             </div>\r\n//                             <div style={{ marginBottom: '20px' }}>\r\n//                                 <div style={{ marginBottom: \"10px\" }}>\r\n//     <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\r\n//         Communication:\r\n//     </label>\r\n//     <select\r\n//         id=\"communicationSelect\"\r\n//         style={{\r\n//             width: \"100%\",\r\n//             padding: \"8px\",\r\n//             marginTop: \"5px\",\r\n//             border: \"1px solid #ccc\",\r\n//             borderRadius: \"4px\",\r\n//         }}\r\n//         value={selectedCommunication}\r\n//         onChange={(e) => setSelectedCommunication(e.target.value)}\r\n//     >\r\n//         <option value=\"\">Select Communication</option>\r\n//         {communications.map((comm) => (\r\n//             <option key={comm.communicationId} value={comm.communicationId}>\r\n//                 {comm.communicationName}\r\n//             </option>\r\n//         ))}\r\n//     </select>\r\n// </div>\r\n\r\n//                                 {/* Flatpickr for Date */}\r\n//                                 <div style={{ marginBottom: '10px' }}>\r\n//                                     <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\r\n//                                     <Flatpickr\r\n//                                         id=\"updatedDate\"\r\n//                                         value={selectedDate}\r\n//                                         onChange={(date) => setSelectedDate(date)}\r\n//                                         options={{ dateFormat: 'Y-m-d' }}\r\n//                                         style={{\r\n//                                             width: '100%',\r\n//                                             padding: '8px',\r\n//                                             marginTop: '5px',\r\n//                                             border: '1px solid #ccc',\r\n//                                             borderRadius: '4px',\r\n//                                         }}\r\n//                                     />\r\n//                                 </div>\r\n//                                 {/* Notes Textarea */}\r\n//                                 <div>\r\n//                                     <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\r\n//                                     <textarea\r\n//                                         id=\"notes\"\r\n//                                         value={notes}\r\n//                                         onChange={(e) => setNotes(e.target.value)}\r\n//                                         rows=\"4\"\r\n//                                         style={{\r\n//                                             width: '100%',\r\n//                                             padding: '8px',\r\n//                                             marginTop: '5px',\r\n//                                             border: '1px solid #ccc',\r\n//                                             borderRadius: '4px',\r\n//                                         }}\r\n//                                     ></textarea>\r\n//                                 </div>\r\n//                             </div>\r\n//                             {/* Footer Buttons */}\r\n//                             <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n//                                 <button\r\n//                                     style={{\r\n//                                         padding: '8px 16px',\r\n//                                         background: '#ccc',\r\n//                                         border: 'none',\r\n//                                         borderRadius: '4px',\r\n//                                         cursor: 'pointer',\r\n//                                     }}\r\n//                                     onClick={handleCloseModal}\r\n//                                 >\r\n//                                     Cancel\r\n//                                 </button>\r\n//                                 <button\r\n//                                     style={{\r\n//                                         padding: '8px 16px',\r\n//                                         background: '#007bff',\r\n//                                         color: 'white',\r\n//                                         border: 'none',\r\n//                                         borderRadius: '4px',\r\n//                                         cursor: 'pointer',\r\n//                                     }}\r\n//                                     onClick={handleModalSubmit}\r\n//                                 >\r\n//                                     Submit\r\n//                                 </button>\r\n//                             </div>\r\n//                         </div>\r\n//                     )}\r\n//                     <div className=\"card-body\">\r\n//                         <div className=\"table-responsive table-card\">\r\n//                             <table className=\"table align-middle\">\r\n//                                 <thead className=\"table-light\">\r\n//                                     <tr>\r\n//                                         <th>S.No</th>\r\n//                                         <th>Select</th>\r\n//                                         <th>Company Name</th>\r\n//                                         <th>Last Communication</th>\r\n//                                         <th>Next Communication</th>\r\n//                                     </tr>\r\n//                                 </thead>\r\n//                                 <tbody>\r\n//                                     {lists.length > 0 ? (\r\n//                                         lists.map((company, index) => {\r\n//                                             // Extract communications for the company\r\n//                                             const lastCommunications = company.communications.filter(\r\n//                                                 (c) => c.status === true\r\n//                                             );\r\n//                                             const nextCommunications = company.communications.find(\r\n//                                                 (c) => c.status === false\r\n//                                             );\r\n\r\n//                                             return (\r\n//                                                 <tr key={company.companyId}>\r\n//                                                     <td>{index + 1}</td>\r\n//                                                     <td>\r\n//                                                         <input\r\n//                                                             type=\"checkbox\"\r\n//                                                             checked={selectedCompanies.includes(company.companyId)}\r\n//                                                             onChange={() => handleCheckboxChange(company.companyId)}\r\n//                                                         />\r\n//                                                     </td>\r\n//                                                     <td>{company.companyName}</td>\r\n//                                                     <td>\r\n//                                                         {lastCommunications.length > 0 ? (\r\n//                                                             <>\r\n//                                                                 {lastCommunications.map((communication, idx) => (\r\n//                                                                     <div key={idx}>\r\n//                                                                         {communication.communicationName} -{\" \"}\r\n//                                                                         {moment(communication.scheduledDate).format('DD/MM/YYYY')} {/* Format date */}\r\n//                                                                     </div>\r\n//                                                                 ))}\r\n//                                                             </>\r\n//                                                         ) : (\r\n//                                                             \"No Completed Communications\"\r\n//                                                         )}\r\n//                                                     </td>\r\n//                                                     <td>\r\n//                                                         {nextCommunications ? (\r\n//                                                             <>\r\n//                                                                 <span\r\n//                                                                     style={{\r\n//                                                                         color: isToday(new Date(nextCommunications.scheduledDate))\r\n//                                                                             ? \"yellow\"\r\n//                                                                             : isPast(new Date(nextCommunications.scheduledDate))\r\n//                                                                                 ? \"red\"\r\n//                                                                                 : \"inherit\",\r\n//                                                                         fontWeight: \"bold\", // Make the text bold\r\n//                                                                     }}\r\n//                                                                 >\r\n//                                                                     {nextCommunications.communicationName}\r\n//                                                                 </span>{\" \"}\r\n//                                                                 -{\" \"}\r\n//                                                                 {moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')} {/* Format date */}\r\n//                                                                 <br />\r\n//                                                                 <button className=\"btn btn-link text-danger\">\r\n//                                                                     Disable Highlight\r\n//                                                                 </button>\r\n//                                                             </>\r\n//                                                         ) : (\r\n//                                                             \"No Upcoming Communication\"\r\n//                                                         )}\r\n//                                                     </td>\r\n//                                                 </tr>\r\n//                                             );\r\n//                                         })\r\n//                                     ) : (\r\n//                                         <tr>\r\n//                                             <td colSpan=\"6\" className=\"text-center\">\r\n//                                                 No data available\r\n//                                             </td>\r\n//                                         </tr>\r\n//                                     )}\r\n//                                 </tbody>\r\n//                             </table>\r\n//                         </div>\r\n//                         <div className=\"align-items-center mt-4 pt-2 justify-content-between d-flex\">\r\n//                             <div className=\"flex-shrink-0\">\r\n//                                 <div className=\"text-muted\">\r\n//                                     Showing{\" \"}\r\n//                                     <span className=\"fw-semibold\">{lists.length}</span> of{\" \"}\r\n//                                     <span className=\"fw-semibold\">{totalRecords}</span>{\" \"}\r\n//                                     Results\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport config from \"../../Common/Configurations/APIConfig\";\r\nimport { handleSuccess, handleError } from \"../../Common/Layout/CustomAlerts\";\r\nimport Flatpickr from \"react-flatpickr\"; // Import Flatpickr\r\nimport \"flatpickr/dist/themes/material_blue.css\"; // Import Flatpickr theme\r\nimport moment from \"moment\";\r\n\r\n\r\nexport default function Dashboard() {\r\n    const [lists, setLists] = useState([]);\r\n    const [recordForEdit, setRecordForEdit] = useState(null);\r\n    const [errors, setErrors] = useState({});\r\n    const [btnSubmit, setBtnSubmit] = useState(true);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [data, setData] = useState([]);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedCommunication, setSelectedCommunication] = useState(\"\");\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [notes, setNotes] = useState(\"\");\r\n    const [selectedCompany, setSelectedCompany] = useState(null); // Track the selected company\r\n    const [selectedCompanies, setSelectedCompanies] = useState([]);\r\n    const [communications, setCommunications] = useState([]);\r\n\r\n\r\n    const headerConfig = {\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"userToken\"),\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    \r\n\r\n   \r\n\r\n    const validate = () => {\r\n        let temp = {};\r\n      \r\n        setErrors(temp);\r\n        return Object.values(temp).every((x) => x === true);\r\n    };\r\n\r\n    \r\n    const handleCommunicationPerformed = async () => {\r\n        if (selectedCompanies.length > 0) {\r\n            try {\r\n                // Fetch communications from the API\r\n                const response = await axios.get(`${config.APIACTIVATEURL}${config.GETALLCOMMUNICATIONMANAGEMENT}`, headerConfig);\r\n    \r\n                if (response.data && response.data.statusCode === 200) {\r\n                    // Update communications state with API data\r\n                    setCommunications(response.data.data || []);\r\n                    setShowModal(true); // Open the modal\r\n                } else {\r\n                    handleError(response.data.message || \"Failed to fetch communications.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching communications:\", error);\r\n                handleError(\"An error occurred while fetching communications.\");\r\n            }\r\n        } else {\r\n            alert(\"Please select at least one company!\");\r\n        }\r\n    };\r\n    \r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        setSelectedCompanies([]);  // Reset selected companies when closing modal\r\n    };\r\n    const handleModalSubmit = async () => {\r\n        // Payload to be sent to the backend\r\n        const updateRecord = {\r\n          selectedCompanies, // Assuming this is an array of company IDs\r\n          selectedCommunication, // Communication ID\r\n          selectedDate, // List of dates (could be an array or a single date based on your backend logic)\r\n          notes, // The notes entered in the modal\r\n        };\r\n      \r\n        try {\r\n          // Make the PUT request with the provided format\r\n          const response = await axios.put(\r\n            `${config.APIACTIVATEURL}${config.UPDATECOMMUNICATION}`, // API URL\r\n            updateRecord, // Payload with the data\r\n            headerConfig // Header configuration with Authorization and Content-Type\r\n          );\r\n      \r\n          // Handle response\r\n          if (response.data.statusCode === 200) {\r\n            handleSuccess(\"Status updated successfully.\");\r\n            // You can add more success logic here (like closing the modal, etc.)\r\n          } else {\r\n            handleError(response.data.message || \"Failed to update status.\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error in updating status:\", error);\r\n          handleError(\"An error occurred while updating the status.\");\r\n        }\r\n      };\r\n\r\n    const handleCheckboxChange = (companyId) => {\r\n        setSelectedCompanies((prevSelectedCompanies) => {\r\n            if (prevSelectedCompanies.includes(companyId)) {\r\n                // Deselect company\r\n                return prevSelectedCompanies.filter((id) => id !== companyId);\r\n            } else {\r\n                // Select company\r\n                return [...prevSelectedCompanies, companyId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Open the modal\r\n\r\n\r\n    const isToday = (date) => {\r\n        const today = new Date();\r\n        return (\r\n            date.getDate() === today.getDate() &&\r\n            date.getMonth() === today.getMonth() &&\r\n            date.getFullYear() === today.getFullYear()\r\n        );\r\n    };\r\n    const isPast = (date) => date < new Date();\r\n\r\n\r\n    const resetForm = () => {\r\n       \r\n        setErrors({});\r\n    };\r\n\r\n    \r\n\r\n    const getData = (number) => {\r\n        axios\r\n            .get(\r\n                `${config.APIACTIVATEURL}${config.GETCOMMUNICATION}?pageNumber=${number}&pageSize=${pageSize}`,\r\n                headerConfig\r\n            )\r\n            .then((response) => {\r\n                setLists(response.data.data);\r\n                setPageNumber(response.data.data.pageNumber);\r\n                setPageSize(response.data.data.pageSize);\r\n                setTotalPages(response.data.data.totalPages);\r\n                setData(response.data.data);\r\n                setTotalRecords(response.data.data.totalRecords);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData(pageNumber);\r\n    }, []);\r\n\r\n    const renderPageNumbers = [...Array(totalPages)].map((_, index) => {\r\n        const page = index + 1;\r\n        return (\r\n            <li\r\n                className=\"page-item\"\r\n                key={page}\r\n                onClick={() => getData(page)}\r\n            >\r\n                <Link className=\"page-link\">{page}</Link>\r\n            </li>\r\n        );\r\n    });\r\n    return (\r\n        <div className=\"row\" style={{ padding: '40px' }}> {/* Add padding to the row */}\r\n            <div className=\"col-xl-12\">\r\n                <div className=\"card card-height-100\">\r\n                    <div className=\"card-header align-items-center d-flex\">\r\n                        <h4 className=\"card-title mb-0 flex-grow-1\">Communications</h4>\r\n    \r\n                        <button\r\n                            className=\"btn btn-primary ms-auto\"\r\n                            onClick={handleCommunicationPerformed}\r\n                            disabled={selectedCompanies.length === 0} // Disable button if no company is selected\r\n                        >\r\n                            Communication Performed\r\n                        </button>\r\n                    </div>\r\n    \r\n                    {/* Modal */}\r\n                    {showModal && (\r\n                        <div\r\n                            style={{\r\n                                position: 'fixed',\r\n                                top: '50%',\r\n                                left: '50%',\r\n                                transform: 'translate(-50%, -50%)',\r\n                                background: 'white',\r\n                                border: '1px solid #ccc',\r\n                                borderRadius: '8px',\r\n                                width: '400px',\r\n                                boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n                                zIndex: 1000,\r\n                                padding: '20px',\r\n                            }}\r\n                        >\r\n                            <div>\r\n                                <h5>Communication Performed</h5>\r\n                                <hr />\r\n                            </div>\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                {/* Communication Select */}\r\n                                <div style={{ marginBottom: \"10px\" }}>\r\n                                    <label htmlFor=\"communicationSelect\" style={{ fontWeight: \"bold\" }}>\r\n                                        Communication:\r\n                                    </label>\r\n                                    <select\r\n                                        id=\"communicationSelect\"\r\n                                        style={{\r\n                                            width: \"100%\",\r\n                                            padding: \"8px\",\r\n                                            marginTop: \"5px\",\r\n                                            border: \"1px solid #ccc\",\r\n                                            borderRadius: \"4px\",\r\n                                        }}\r\n                                        value={selectedCommunication}\r\n                                        onChange={(e) => setSelectedCommunication(e.target.value)}\r\n                                    >\r\n                                        <option value=\"\">Select Communication</option>\r\n                                        {communications.map((comm) => (\r\n                                            <option key={comm.communicationId} value={comm.communicationId}>\r\n                                                {comm.communicationName}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n    \r\n                                {/* Flatpickr for Date */}\r\n                                <div style={{ marginBottom: '10px' }}>\r\n                                    <label htmlFor=\"updatedDate\" style={{ fontWeight: 'bold' }}>Updated Date:</label>\r\n                                    <Flatpickr\r\n                                        id=\"updatedDate\"\r\n                                        value={selectedDate}\r\n                                        onChange={(date) => setSelectedDate(date)}\r\n                                        options={{ dateFormat: 'Y-m-d' }}\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '8px',\r\n                                            marginTop: '5px',\r\n                                            border: '1px solid #ccc',\r\n                                            borderRadius: '4px',\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n    \r\n                                {/* Notes Textarea */}\r\n                                <div>\r\n                                    <label htmlFor=\"notes\" style={{ fontWeight: 'bold' }}>Add Notes:</label>\r\n                                    <textarea\r\n                                        id=\"notes\"\r\n                                        value={notes}\r\n                                        onChange={(e) => setNotes(e.target.value)}\r\n                                        rows=\"4\"\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '8px',\r\n                                            marginTop: '5px',\r\n                                            border: '1px solid #ccc',\r\n                                            borderRadius: '4px',\r\n                                        }}\r\n                                    ></textarea>\r\n                                </div>\r\n                            </div>\r\n    \r\n                            {/* Footer Buttons */}\r\n                            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n                                <button\r\n                                    style={{\r\n                                        padding: '8px 16px',\r\n                                        background: '#ccc',\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={handleCloseModal}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button\r\n                                    style={{\r\n                                        padding: '8px 16px',\r\n                                        background: '#007bff',\r\n                                        color: 'white',\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={handleModalSubmit}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n    \r\n                    {/* Table */}\r\n                    <div className=\"card-body\" style={{ padding: '20px' }}> {/* Add padding to the card-body */}\r\n                        <div className=\"table-responsive table-card\" style={{ padding: '10px' }}> {/* Add padding here */}\r\n                            <table className=\"table align-middle\">\r\n                                <thead className=\"table-light\">\r\n                                    <tr>\r\n                                        <th>S.No</th>\r\n                                        <th>Select</th>\r\n                                        <th>Company Name</th>\r\n                                        <th>Last Communication</th>\r\n                                        <th>Next Communication</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {lists.length > 0 ? (\r\n                                        lists.map((company, index) => {\r\n                                            // Extract communications for the company\r\n                                            const lastCommunications = company.communications.filter(\r\n                                                (c) => c.status === true\r\n                                            );\r\n                                            const nextCommunications = company.communications.find(\r\n                                                (c) => c.status === false\r\n                                            );\r\n    \r\n                                            return (\r\n                                                <tr key={company.companyId}>\r\n                                                    <td>{index + 1}</td>\r\n                                                    <td>\r\n                                                        <input\r\n                                                            type=\"checkbox\"\r\n                                                            checked={selectedCompanies.includes(company.companyId)}\r\n                                                            onChange={() => handleCheckboxChange(company.companyId)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>{company.companyName}</td>\r\n                                                    <td>\r\n                                                        {lastCommunications.length > 0 ? (\r\n                                                            <>\r\n                                                                {lastCommunications.map((communication, idx) => (\r\n                                                                    <div key={idx}>\r\n                                                                        {communication.communicationName} -{\" \"}\r\n                                                                        {moment(communication.scheduledDate).format('DD/MM/YYYY')}\r\n                                                                    </div>\r\n                                                                ))}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            \"No Completed Communications\"\r\n                                                        )}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {nextCommunications ? (\r\n                                                            <>\r\n                                                                <span\r\n                                                                    style={{\r\n                                                                        color: isToday(new Date(nextCommunications.scheduledDate))\r\n                                                                            ? \"yellow\"\r\n                                                                            : isPast(new Date(nextCommunications.scheduledDate))\r\n                                                                                ? \"red\"\r\n                                                                                : \"inherit\",\r\n                                                                        fontWeight: \"bold\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {nextCommunications.communicationName}\r\n                                                                </span>{\" \"}\r\n                                                                -{\" \"}\r\n                                                                {moment(nextCommunications.scheduledDate).format('DD/MM/YYYY')}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            \"No Upcoming Communication\"\r\n                                                        )}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colSpan=\"6\" className=\"text-center\">\r\n                                                No data available\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}    "],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,uCAAuC;AAC1D,SAASC,aAAa,EAAEC,WAAW,QAAQ,kCAAkC;AAC7E,OAAOC,SAAS,MAAM,iBAAiB,CAAC,CAAC;AACzC,OAAO,yCAAyC,CAAC,CAAC;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG5B,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}